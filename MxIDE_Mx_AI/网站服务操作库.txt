##中文库名称:网站服务操作库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
|Go|网站_初始化()|网站服务器|面向过程|初始化一个网站服务器，无论创建多少个，都共享同一个服务。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

||网站_连接MySql(0,"127.0.0.1","3306","root","root","MxIDE",10,10)||面向过程|连接MYSQL数据，如有异常请查阅目录下logs日志|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_初始化()|`0`| `文本型` | `0`| 1 启动 0 不启动  默认 0 ||网站_初始化()|`"127.0.0.1"`| `文本型` | `"127.0.0.1"`| 数据库的ip地址一般为:"127.0.0.1" ||网站_初始化()|`"3306"`| `文本型` | `"3306"`| 数据库通讯端口 一般为 "3306" ||网站_初始化()|`"root"`| `文本型` | `"root"`| 默认为 "root" ||网站_初始化()|`"root"`| `文本型` | `"root"`| 默认为 "root" ||网站_初始化()|`"MxIDE"`| `文本型` | `"MxIDE"`| 默认为 "MxIDE" ||网站_初始化()|`10`| `数值型` | `10`| 默认 10 ||网站_初始化()|`10`| `数值型` | `10`| 默认 10  |
||网站_设置端口()||面向过程|设置当前服务器启动端口，如果启动失败可能会自动结束进程。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_连接MySql(0,"127.0.0.1","3306","root","root","MxIDE",10,10)|``| `数值型` | ``| 当前服务器的端口 |
|if(消息.url == %s){%s(ID,消息);return(0);}|网站_路由绑定(,)||面向过程|更简便的请求接口绑定方式。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_设置端口()|``| `文本型` | ``| 例如:"/index.html" ||网站_设置端口()|``| `子程序指针` | ``| &首页事件，它必须包含两个参数 ID(数值型),消息(网站消息) |
|Go|网站_初始内存()|共享内存对象|面向过程|初始化内存映射服务。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

||网站_连接Redis(0,"localhost","6379","123456",0,10,5)|Redis对象|面向过程|连接redis服务功能|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_初始内存()|`0`| `数值型` | `0`| 1 开启 0关闭 ||网站_初始内存()|`"localhost"`| `文本型` | `"localhost"`| 默认 "localhost" ||网站_初始内存()|`"6379"`| `文本型` | `"6379"`| 默认 "6379" ||网站_初始内存()|`"123456"`| `文本型` | `"123456"`| 默认 123456的 ||网站_初始内存()|`0`| `数值型` | `0`| 默认使用 0 号数据库 ||网站_初始内存()|`10`| `数值型` | `10`| 初始化连接池数量 ||网站_初始内存()|`5`| `数值型` | `5`| 当没有工作时候最低保持连接数量。 |
|Go|网站_初始房间()|房间对象|面向过程|创建房间功能|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|try {Go.读锁定(%s);

|许可读进入()||面向过程|读入锁事件，重要数据为了防止冲突可以在这里添加。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|网站_初始房间()|``| `文本型` | ``| 设置内容后，自动创建许可证 |
|    } finally { Go.读解锁(%s); }

|许可读退出()||面向过程|必须跟随 许可证进入 配套使用。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|许可读进入()|``| `文本型` | ``| 许可证进入时候的 设定内容。 |
|try {Go.锁定(%s);

|许可写进入()||面向过程|写数据的时候确保数据安全的锁进入|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|许可读退出()|``| `文本型` | ``| 不存在的许可证会自动销毁 |
|   } finally { Go.解锁(%s); }
|许可写退出()||面向过程|配套 许可写进入 使用|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|许可写进入()|``| `文本型` | ``| 许可写进入 事后设置的许可证 |
|require(%s)|引用JS库()|对象型|面向过程|require  返回当前库的调用名称实例-根据每个库类型来决定。常规直接调用库中方法即可。特殊需要使用申明的 变量名.方法()|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|许可写退出()|``| `文本型` | ``| 根目录使用 "./ku/mxide.js" 或者远程地址 "http://xxx.com/cc.js" |
|设置网页协议头(%s,%s,%s)|设置网页协议头(,,)||网站服务器|给客户端回复消息时候可以预先设置协议头|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|引用JS库()|``| `数值型` | ``| 客户端ID ||引用JS库()|``| `文本型` | ``| 例如："Content-Type" 或 #网站_ ||引用JS库()|``| `文本型` | ``| 例如：".json": "application/json" |
|发送网页消息(%s,%s)|发送网页消息(,)||网站服务器|对客户端推送网页消息内容,可预先使用设置协议头来决定发送什么类型。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置网页协议头(,,)|``| `数值型` | ``| 客户端连接ID ||设置网页协议头(,,)|``| `文本型` | ``| 要推送的网页内容 |
|发送网页消息Ex(%s,%s)|发送网页消息Ex(,)||网站服务器|对客户端推送网页，该方案会直接通过文件从底层发送并不会读入到JS中|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送网页消息(,)|``| `文本型` | ``| 客户端ID ||发送网页消息(,)|``| `文本型` | ``| 当前文件路径，如果不是绝对路径则需要带上 '.' + 文件路径 |
|读入文件(%s)|读入文件()|文本型|网站服务器|从指定路径读入文件，返回内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送网页消息Ex(,)|``| `文本型` | ``| 如果是相对路径请带上 "." + 文件路径 |
|获取URL后缀(%s)|获取URL后缀()|文本型|网站服务器|例如 ad/index.html?name=5  得到 .html|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|读入文件()|``| `文本型` | ``| 传入请求地址即可 例如 消息.ulr |
|查询后缀协议(%s)|查询后缀协议()|文本型|网站服务器|在设置网页头协议时候，如果是 "Content-Type" 则可以查询目录下的 mime.json的协议值 如果没有则为空建议其他文件协议可自行添加。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取URL后缀()|``| `文本型` | ``| 例如:".html" 注意是带 . |
|取运行目录()|取运行目录()|文本型|网站服务器|获取服务端当前所在目录|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|执行SQL(%s,%s)|执行MYSQL(, )|对象型|网站服务器|通过执行SQL语句返回结果对象 当前为mysql|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|取运行目录()|``| `文本型` | ``| 调用mysql的语句 如果是查询则返回结果。 ||取运行目录()|` `| `数组型` | ` `| 注意如果有值则必须前面写 ...参数值  这表示自动传参。 |
|更新业务脚本()|更新业务脚本()||网站服务器|动态将lib/业务逻辑.js文件更新到底层中避免重启服务。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|调用DLL( %s , %s ,%s  , %s ,%s )|调用DLL(,1,,[],[])|文本型|网站服务器|调用DLL函数返回结果，注:32位仅调用32位DLL，64同理不能交叉使用。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|更新业务脚本()|``| `文本型` | ``| 例如 "MyApi.DLL" 在服务端根目录中 ||更新业务脚本()|`1`| `文本型` | `1`| 默认转换UTF 将返回结果转换编码 1 gbk到utf 其他不转换 ||更新业务脚本()|``| `文本型` | ``| DLL中要被调用的函数名，必须存在，且大小写敏感。 ||更新业务脚本()|`[]`| `数组型` | `[]`| 参数类型 使用\\分开 例如["string"\\"int"\\"bool"] ||更新业务脚本()|`[]`| `数组型` | `[]`| ["aaa"\\1\\真] |
|发送WebSocket消息(%s,%s)|发送WebSocket消息(,)||网站服务器|仅用于回复websocket客户消息。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|调用DLL(,1,,[],[])|``| `文本型` | ``| 客户ID ||调用DLL(,1,,[],[])|``| `文本型` | ``| 消息内容编码推荐utf8 |
||路由绑定(,)||网站服务器|更简便的请求接口绑定方式。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送WebSocket消息(,)|``| `文本型` | ``| 例如:"/index.html" ||发送WebSocket消息(,)|``| `子程序指针` | ``| &首页事件，它必须包含两个参数 ID(数值型),消息(网站消息) |
|base64编码(%s)|编码base64编码()|文本型|网站服务器|将文本内容转换到base64|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|路由绑定(,)|``| `文本型` | ``| 文本内容 |
|base64编码(%s)|编码base64解码()|文本型|网站服务器|将一段base64的内容转换成原始内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码base64编码()|``| `文本型` | ``| base64内容 |
|utf8到gbk(%s)|编码utf8到gbk()|文本型|网站服务器|将utf8的内容转换到gbk|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码base64解码()|``| `文本型` | ``| utf8内容 |
|gbk到utf8(%s)|编码gbk到utf8()|文本型|网站服务器||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码utf8到gbk()|``| `文本型` | ``| gbk内容 |
|文本到Hex(%s,%s)|编码文本到Hex(,true)|文本型|网站服务器|将一段内容转换到 FF FF格式|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码gbk到utf8()|``| `文本型` | ``| 原始内容 ||编码gbk到utf8()|`true`| `逻辑型` | `true`| 是否输出空格 |
|Hex到文本(%s)|编码Hex到文本()|文本型|网站服务器|将hex数据还原成为文本|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码文本到Hex(,true)|``| `文本型` | ``|  |
|URL编码(%s)|编码URL编码()|文本型|网站服务器|URL编码|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码Hex到文本()|``| `文本型` | ``|  |
|URL解码(%s)|编码URL解码()|文本型|网站服务器||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码URL编码()|``| `文本型` | ``|  |
|JWT生成(%s,%s)|JWT生成(,'mxide.com')|文本型|网站服务器|JWT验证系统 返回一个token值|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|编码URL解码()|``| `对象型` | ``| 这里是一个对象变量,用于生成JWT校验对象 ||编码URL解码()|`'mxide.com'`| `文本型` | `'mxide.com'`| 一个key |
|JWT验证(%s,%s)|JWT验证(,'mxide.com')|逻辑型|网站服务器|校验客户端传递过来的值是否正确。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JWT生成(,'mxide.com')|``| `文本型` | ``| 通过JWT生成返回的值 ||JWT生成(,'mxide.com')|`'mxide.com'`| `文本型` | `'mxide.com'`| 生成时候的key |
|httpRequest(%s,%s,%s,%s,%s)|HTTP请求('GET',,'',5000,[])|对象型|网站服务器|通过HTTP请求返回请求到的结果|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|JWT验证(,'mxide.com')|`'GET'`| `文本型` | `'GET'`| 'GET' 'POST' 等协议 ||JWT验证(,'mxide.com')|``| `文本型` | ``|  ||JWT验证(,'mxide.com')|`''`| `文本型` | `''`| post模式下的请求数据 注意是文本型 ||JWT验证(,'mxide.com')|`5000`| `数值型` | `5000`| 默认5000毫秒 ||JWT验证(,'mxide.com')|`[]`| `数组型` | `[]`| 一个请求协议数组对象 例如[{key:name}]  |
|延时(%s,%s)|延时执行(,)||网站服务器|延时执行某个函数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|HTTP请求('GET',,'',5000,[])|``| `数值型` | ``| 毫秒 ||HTTP请求('GET',,'',5000,[])|``| `子程序指针` | ``| 要回调的事件 |
|发送JSON消息(%s,%s)|发送WebSocket消息JSON(,)||网站服务器|向用户推送JSON消息体|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|延时执行(,)|``| `文本型` | ``| 用户ID ||延时执行(,)|``| `对象型` | ``| JSON消息对象 |
|广播消息(%s)|发送WebSocket消息JSON全体()||网站服务器|对所有在线用户发送JSON消息|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送WebSocket消息JSON(,)|``| `对象型` | ``| 消息JSON对象 |
|写出文件(%s,%s)|写出文件(,)||网站服务器|目前仅支持文本型|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|发送WebSocket消息JSON全体()|``| `文本型` | ``| 要写出的路径 ||发送WebSocket消息JSON全体()|``| `文本型` | ``| 要写出的数据 |
|获取在线人数()|获取在线人数()|数值型|网站服务器|获取在线人数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|关闭程序(%s)|程序关闭()|数值型|网站服务器|关闭指定pid进程|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取在线人数()|``| `数值型` | ``| 某个进程的pid标志 |
|执行程序(%s,%s,%s)|程序执行(,"null",false)|运行对象|网站服务器|执行一个外部程序 返回对象 包含 [错误，pid]两个成员|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|程序关闭()|``| `文本型` | ``| 从程序运行的路径 ||程序关闭()|`"null"`| `文本型` | `"null"`| 真则等待程序执行完毕，假则不等待。 ||程序关闭()|`false`| `逻辑型` | `false`| 慎用真模式，会阻塞其他用户执行该命令，但不阻塞消息。 |
|执行CMD(%s,%s)|执行CMD(,false)|通用型|网站服务器|执行CMD命令函数，使用完整命令字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|程序执行(,"null",false)|``| `文本型` | ``| 运行cmd命令例如:"ping www.baidu.com -n 4" 或 "start notepad.exe D:\\test.txt", ||程序执行(,"null",false)|`false`| `文本型` | `false`| 真则为等待执行完毕，假则不等待 |
|读取XLS(%s)|读取XLS()|数组型|网站服务器|返回 null 失败。 否则返回一个数组对象|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|执行CMD(,false)|``| `文本型` | ``| xls的完整路径 |
|method|method()|文本型|网站消息|请求方法（如 GET、POST 等）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|url|url()|文本型|网站消息|请求的完整 URL|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|url|headers()|文本型|网站消息|请求头，键值对形式，值可能是多个|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|body|body()|文本型|网站消息|一般是post请求体内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|clientIP|clientIP()|文本型|网站消息|客户端 IP 地址|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|realIP|realIP()|文本型|网站消息|真实 IP 地址（经过代理时可能不同）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|origin|origin()|文本型|网站消息|请求来源（用于跨域请求）用于区分绑定域名|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|userAgent|userAgent()|文本型|网站消息|客户端用户代理信息（浏览器或客户端标识）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|queryParams|queryParams()|数组型|网站消息| URL 查询参数，键值对形式，值可能是多个例如 user=1&pass=2|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|设置Extra(%s,%s)|设置数据(,)|对象型|共享内存对象|对内存中覆盖数据 线程安全|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|queryParams()|``| `文本型` | ``| 添加分类时候的类名 ||queryParams()|``| `通用型` | ``| 支持任意数据类型 |
|获取Extra(%s)|获取数据()|通用型|共享内存对象|获取当前键的内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置数据(,)|``| `文本型` | ``| 设置时候的键 |
|删除Extra(%s)|删除数据()||共享内存对象|删除共享内存中的数据 线程安全|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取数据()|``| `文本型` | ``| 设置时候的键内容 |
|获取所有Extra()|获取所有()|通用型|共享内存对象|所欲当前所有数据|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|设置(%s,%s,%s)|设置(,,)||Redis对象|设置键值|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取所有()|``| `文本型` | ``| 要存储的键名 ||获取所有()|``| `对象型` | ``| 一个Json对象的值 ||获取所有()|``| `数值型` | ``| 该数据多久过期。 |
|获取(%s)|获取()|对象型|Redis对象|获取值|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置(,,)|``| `文本型` | ``|  |
|删除(%s)|删除()|数值型|Redis对象|删除键|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取()|``| `文本型` | ``| 设置的键 |
|存在(%s)|存在()|逻辑型|Redis对象|检查键是否存在|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|删除()|``| `文本型` | ``| 设置时候的键 |
|设置过期(%s,%s)|设置过期(,)|逻辑型|Redis对象|设置过期时间|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|存在()|``| `文本型` | ``| 设置时候的键名 ||存在()|``| `数值型` | ``| 设置这个键的数据过期时间 |
|房间设置(%s,%s)|设置房间属性(,0)||房间对象|设置房间属性（0表示无限制，其他数字表示互斥组）|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置过期(,)|``| `文本型` | ``| 房间定义名称 ||设置过期(,)|`0`| `数值型` | `0`| 0表示无限制，其他数字表示互斥组 |
|加入房间(%s,%s)|加入(,)||房间对象|用户加入到指定房间。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置房间属性(,0)|``| `文本型` | ``| 用户ID ||设置房间属性(,0)|``| `文本型` | ``| 要进入的房间名 |
|离开指定房间(%s,%s)|离开(,)||房间对象|用户离开指定房间名|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|加入(,)|``| `文本型` | ``| 用户ID ||加入(,)|``| `文本型` | ``| 用户要离开的某个房间名。 |
|离开房间(%s)|离开所有()||房间对象|离开该用户所在的所有房间。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|离开(,)|``| `文本型` | ``| 用户ID |
|获取房间人数(%s)|获取房间人数()|数值型|房间对象|获取这个房间的人数。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|离开所有()|``| `文本型` | ``| 要获取的人数的房间名。 |
|获取房间用户(%s)|获取用户组()|数组型|房间对象|获取这个房间的所有用户数组|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取房间人数()|``| `文本型` | ``|  |
|获取用户房间(%s)|获取用户房间()|数组型|房间对象|获取该用户的所有房间列表|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取用户组()|``| `文本型` | ``| 用户ID |
|广播房间消息(%s,%s)|广播房间消息(,)||房间对象|对该房间所有人进行广播|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|获取用户房间()|``| `文本型` | ``| 要广播的房间名 ||获取用户房间()|``| `对象型` | ``| 消息JSON对象 |
|广播用户所有房间(%s,%s)|广播用户所有房间(,)||房间对象|通过该用户将消息广播给它所在的所有房间|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|广播房间消息(,)|``| `文本型` | ``|  ||广播房间消息(,)|``| `对象型` | ``| JSON消息 |
### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |
| 网站_内容类型 | `'Content-Type'` | `文本型` | 指定响应体的媒体类型，如 `application/json` 或 `text/html`。 |
| 网站_内容长度 | `'Content-Length'` | `文本型` | 指定响应体的字节数。 |
| 网站_内容处理 | `'Content-Disposition'` | `文本型` | 指定客户端如何处理响应体，常用于文件下载，如 `attachment; filename="file.txt"`。 |
| 网站_缓存控制 | `'Cache-Control'` | `文本型` | 控制缓存行为，如 `no-cache` 或 `max-age=3600`。 |
| 网站_过期时间 | `'Expires'` | `文本型` | 指定响应体的过期时间。 |
| 网站_重定向地址 | `'Location'` | `文本型` | 用于重定向，指定客户端应跳转的 URL。 |
| 网站_设置Cookie | `'Set-Cookie'` | `文本型` | 设置客户端的 Cookie。 |
| 网站_跨域允许来源 | `'Access-Control-Allow-Origin'` | `文本型` | 用于 CORS，指定允许访问的源。"*" 表示所有 |
| 网站_跨域允许方法 | `'Access-Control-Allow-Methods'` | `文本型` | 用于 CORS，指定允许的 HTTP 方法。 |
| 网站_跨域允许头 | `'Access-Control-Allow-Headers'` | `文本型` | 用于 CORS，指定允许的请求头。 |
| 网站_跨域暴露头 | `'Access-Control-Expose-Headers'` | `文本型` | 用于 CORS，指定客户端可访问的响应头。 |
| 网站_跨域缓存时间 | `'Access-Control-Max-Age'` | `文本型` | 用于 CORS，指定预检请求的缓存时间。 |
| 网站_认证方式 | `'WWW-Authenticate'` | `文本型` | 用于 HTTP 认证，指定认证方式。 |
| 网站_页面嵌入控制 | `'X-Frame-Options'` | `文本型` | 防止点击劫持，如 `DENY` 或 `SAMEORIGIN`。 |
| 网站_内容类型控制 | `'X-Content-Type-Options'` | `文本型` | 防止 MIME 类型嗅探，通常设置为 `nosniff`。 |
| 网站_XSS防护 | `'X-XSS-Protection'` | `文本型` | 启用或禁用浏览器的 XSS 过滤，如 `1; mode=block`。 |
| 网站_安全传输 | `'Strict-Transport-Security'` | `文本型` | 强制使用 HTTPS，如 `max-age=31536000; includeSubDomains`。 |
| 网站_引用控制 | `'Referrer-Policy'` | `文本型` | 控制 Referer 头的发送，如 `no-referrer` 或 `strict-origin-when-cross-origin`。 |
| 网站_内容安全 | `'Content-Security-Policy'` | `文本型` | 控制资源加载策略，防止 XSS 攻击。 |
| 网站_内存分类_用户 | `"users"` | `文本型` | 默认：users |
| 网站_内存分类_怪物 | `"monster"` | `文本型` | monster |
| 网站_内存分类_NPC | `"npc"` | `文本型` | npc |

##使用说明:

当命令有 ""开头 则最后有 !! 命令形成闭环，闭环中不允许将`响应数据ref`和`事件接口`部分写到这里。

```墨香中文编程 
!!ELM_滑块_创建(参数一,参数二,参数三)
//这里是其他组件插槽
""ELM_滑块_创建结束
```
###代码规则
####在代码下一行添加注释 例如://这是注释内容，这一行可以换成真实注释。
#### 禁止方法`ELM_上传_创建()`的参数换行!
###代码使用案例
```墨香中文编程 
!!ELM_上传_创建('http://api.example.com/upload', #ELM_上传_请求方法_POST, 数据.请求头, 数据.上传文件列表, 假, 假, 数据.上传字段名, 假, true, , , &事件上传成功, &事件上传失败, , , , 1, 真, 真, 'image/*', , , #ELM_上传_列表类型_PICTURE_CARD, '', 数据.上传样式, 当前.名称)

""ELM_上传_创建结束()
```
##规则二
###如果命令中例如：ELM_xx()，命令前面并没有开头则表示普通方法命令，不需要结束语句闭环。
###普通方法参数也必须在一行不允许换行，例如:

```墨香中文编程 
ELM_按钮_创建('','',false,false,false,false,false,false,'button','','', ,'','墨香中文编程')
```

##如果执行的命令的`实例化对象父亲` 不是面相过程，则为实例类对象，则根据`实例化对象父亲`为面相过程的命令中的`实例化对象类型` 一样值的命令来创建返回变量
###例如 let 网站=网站_初始化(80)；网站.执行SQL(,,,) 这样调用才可以。
###例如 let 房间=网站_初始房间()；房间.加入房间(%s,%s); 这样调用才可以。

##方法或子程序构造
231000,241100,351100这三行均为代码格式固定不允许修改。 如果没有参数:240000内容则241100移除。 如果没有变量:351100内容则351100移除。
输出在单独代码框

```墨香中文编程 
231000子程序名返回值类型异步公开备注14|10|4|4|6|421|2|3|4|5-6
230100类中公开方法名文本型这个是类里面的公开方法名，因为公开属性已经点开。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000类参数名一文本型参数一的备注
240000类参数名二数值型参数二的备注
351100变量名类型备用备注10|6|4|121|2|3|4
350000变量名称一数组型变量一的备注
350000变量名称二对象型变量二的备注
350000变量名称三文本型变量三的备注
数组_加入成员末尾(变量名称一, 变量名称二)
变量名称三 = 变量名称三 + '我是文本'
返回(变量名称三)

```


##类的构造
输出在单独代码框

###以下代码是一个完整的类构造
231000,241100,351100这三行均为代码格式固定不允许修改。 如果没有参数:240000内容则241100移除。 如果没有变量:351100内容则351100移除。
```墨香中文编程 
171000类名备注18|6|4|421|2-3-4
170100类方法类备注，这里可以描述这个类的作用。
121100变量名类型公开备注1|2|3|4
120000类里面的私有变量名文本型这个没有公开的变量，仅允许在当前类里面使用
120000类里面的公开变量名数值型这个公开的，可以通过类实例化后外部调用

231000方法名返回值类型异步公开备注14|10|4|4|6|421|2|3|4|5-6
230100类中私有方法名文本型这个是类里面的私有方法名，因为公开属性没有点开。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000类参数名一文本型参数一的备注
240000类参数名二数值型参数二的备注
351100变量名类型备用备注10|6|4|121|2|3|4
350000变量名称一数组型变量一的备注
350000变量名称二对象型变量二的备注
350000变量名称三文本型变量三的备注
变量名称二.名称 = '名称'
变量名称二.等级 = 450
变量名称二.属性 = {}
变量名称二.属性.shengming
数组_加入成员末尾(变量名称一, 变量名称二)
变量名称三 = 变量名称三 + '我是文本'
返回(变量名称三)

231000子程序名返回值类型异步公开备注14|10|4|4|6|421|2|3|4|5-6
230100类中公开方法名文本型这个是类里面的公开方法名，因为公开属性已经点开。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000类参数名一文本型参数一的备注
240000类参数名二数值型参数二的备注
351100变量名类型备用备注10|6|4|121|2|3|4
350000变量名称一数组型变量一的备注
350000变量名称二对象型变量二的备注
350000变量名称三文本型变量三的备注
数组_加入成员末尾(变量名称一, 变量名称二)
变量名称三 = 变量名称三 + '我是文本'
返回(变量名称三)


```

