##中文库名称:VUE基础库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
||VUE_创建页面()|VUE对象|面向过程|创建一个VUE页面|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
||``| `文本型` | ``| 例如:“/index.html” 编译时候会在目录中生成一个 index.html |
|<template v-for="%s in %s" :key=%s>|!!VUE_计次循环(i,10,"i")||面向过程|在VUE语法中可以对任何VUE组件渲染循环操作。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_创建页面()|`i`| `数值型` | `i`| 默认: i 每次循环自增+1的变量 例如 循环第五次则为 4 因为从0开始 ||VUE_创建页面()|`10`| `数值型` | `10`| 总循环数量 ||VUE_创建页面()|`"i"`| `文本型` | `"i"`| 在循环中要与变量统一，但这里是文本:"i"  |
|</template>|""VUE_计次循环结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|<template v-for="%s in %s" :key=%s>|!!VUE_数组循环(obj,,index)||面向过程|v-for 数组循环|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|""VUE_计次循环结束()|`obj`| `通用型` | `obj`| 每次循环的渲染的 通用对象成员 例如 obj ||""VUE_计次循环结束()|``| `数组型` | ``| 在 数据配置 中的 成员数组对象  ||""VUE_计次循环结束()|`index`| `文本型` | `index`| 数组中的某个唯一值成员，例如id，如果为空则默认 index 用于动态管理。 |
|</template>|""VUE_数组循环结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|<template  v-if="%s">|!!VUE_如果()||面向过程|VUE中的v-if|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|""VUE_数组循环结束()|``| `文本型` | ``| 例如:user.level === 'vip' 注：user必须在数据配置中存在。 |
|</template>|""VUE_如果结束()||面向过程||
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|</template>
<template  v-else-if="%s">|#*VUE_否则如果()||面向过程|必须在VUE_如果中使用|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|""VUE_如果结束()|``| `文本型` | ``| 参考VUE_如果 |
|</template>
<template  v-else>|##VUE_否则()||面向过程|必须在 VUE_如果 中使用|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|<%s %s %s %s/>|VUE_引用组件(,'','','')||面向过程|可以在组件中继续引用其他组件，但必须先在顶部申明引入那些组件。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|##VUE_否则()|``| `类对象` | ``| 左侧模板系统中的类名 ||##VUE_否则()|`''`| `文本型` | `''`| 如果需要调用该子组件,需要在绑定VUE动态数据 ||##VUE_否则()|`''`| `子程序指针` | `''`| 组件内部触发事件时候，调用 VUE_触发映射事件 即可回调这个页面的子程序 ||##VUE_否则()|`''`| `文档数据` | `''`| 将 文档数据，通过一个绑定数据对象，传递过去。在子组件中可以使用 文档数据 来获取 传递的数据。 |
|<script src=%s %s></script>|VUE_引入全局JS文件(, )||面向过程|注该命令仅推荐再主程序页面使用，顶部即可。使用了defer异步加载|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_引用组件(,'','','')|``| `文本型` | ``| 例如 "res/file.js" ||VUE_引用组件(,'','','')|` `| `文本型` | ` `| 默认传统加载，推荐方案:"defer" 或 "async" 注:async 属于乱序如果js之间有先后依赖不推荐使用。defer不支持依赖 window.onload否则可能异常。 |
|<script src=%s %s></script>|VUE_引入单页JS文件(, )||面向过程|当前加载仅为当前HTML项目页加载，某些页面需要额外第三方JS，但并不是所有页面需求。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_引入全局JS文件(, )|``| `文本型` | ``| 例如 "res/file.js" ||VUE_引入全局JS文件(, )|` `| `文本型` | ` `| 默认传统加载，推荐方案:"defer" 或 "async" 注:async 属于乱序如果js之间有先后依赖不推荐使用。defer不支持依赖 window.onload否则可能异常。 |
|<link rel="stylesheet" href=%s>|VUE_引入全局CSS()||面向过程|在主程序页面引入后，所有页面均为加载这个css文件。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_引入单页JS文件(, )|``| `文本型` | ``| 例如"res/styles.css" |
|<link rel="stylesheet" href=%s>|VUE_引入单页CSS()||面向过程|仅限当前页面被引入这个CSS文件|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_引入全局CSS()|``| `文本型` | ``| CSS路径文件 |
|Vue.reactive(%s)|VUE_创建响应数据()|数据对象|面向过程|在模板响应数据中使用，可以将对象转为响应数据支持动态双向绑定。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_引入单页CSS()|``| `对象型` | ``| 一个数据对象 |
|Vue.ref(%s)|VUE_创建响应值(null)|VUE数据|面向过程|创建一个响应值，推荐绑定组件，单值，如果对象请使用 响应数据|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_创建响应数据()|`null`| `通用型` | `null`| 绑定任何响应数据 |
| <div v-html="%s" :style="%s" :class="%s"></div>|VUE_渲染HTML('','','')||面向过程|v-html 机制，一般用于渲染网页正文代码内容。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_创建响应值(null)|`''`| `文本型` | `''`| 一般用于动态数据渲染 ||VUE_创建响应值(null)|`''`| `文本型` | `''`| 关联样式 ||VUE_创建响应值(null)|`''`| `文本型` | `''`| 关联类名 |
|emit('映射事件', %s); |VUE_触发映射事件()||面向过程|内置命令，在组件中，通过这个命令，可以触发 VUE_引用组件 中的映射事件|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_渲染HTML('','','')|``| `通用型` | ``| 要传递的数据 |
|use(%s)|设置(ElementPlus)||VUE对象|设置第三方组件|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|VUE_触发映射事件()|`ElementPlus`| `对象型` | `ElementPlus`| 组件对象，例如默认:ElementPlus  |
||绑定模板()||VUE对象|绑定当前模板,每个页面支持绑定多个从上到下渲染。|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|设置(ElementPlus)|``| `类` | ``| 请输入例如: &模板类  |
|mount(%s)|启动('#MXIDE')||VUE对象|将 Vue 应用 HelloVueApp 挂载到 DOM根元素上|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|绑定模板()|`'#MXIDE'`| `文本型` | `'#MXIDE'`| 某个根元素 默认 '#MXIDE' |
### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |
| VUE_ElementPlus | `ElementPlus` | `文本型` | 引入ElementPlus组件 |
| VUE_Vant | `vant` | `文本型` | vant |
| VUE_Vant懒加载 | `vant.Lazyload` | `文本型` | 必须引入该插件后，其他组件才可以调用懒加载功能。 |

##使用说明:

当命令有 ""开头 则最后有 !! 命令形成闭环，闭环中不允许将`响应数据ref`和`事件接口`部分写到这里。

```墨香中文编程 
!!ELM_滑块_创建(参数一,参数二,参数三)
//这里是其他组件插槽
""ELM_滑块_创建结束
```
###代码规则
####在代码下一行添加注释 例如://这是注释内容，这一行可以换成真实注释。
#### 禁止方法`ELM_上传_创建()`的参数换行!
###代码使用案例
```墨香中文编程 
!!ELM_上传_创建('http://api.example.com/upload', #ELM_上传_请求方法_POST, 数据.请求头, 数据.上传文件列表, 假, 假, 数据.上传字段名, 假, true, , , &事件上传成功, &事件上传失败, , , , 1, 真, 真, 'image/*', , , #ELM_上传_列表类型_PICTURE_CARD, '', 数据.上传样式, 当前.名称)

""ELM_上传_创建结束()
```
##规则二
###如果命令中例如：ELM_xx()，命令前面并没有开头则表示普通方法命令，不需要结束语句闭环。
###普通方法参数也必须在一行不允许换行，例如:

```墨香中文编程 
ELM_按钮_创建('','',false,false,false,false,false,false,'button','','', ,'','墨香中文编程')
```

##响应数据ref
输出在单独代码框

###ref绑定数据在**VUE模板**中:所有成员都放在 `数据` 对象上
```墨香中文编程 
351100变量名类型备用备注8|11|4|341|2|3|4
350000数据VUE数据用于当前全局可以操作的动态响应数据
数据.滑块值=1
数据 = VUE_创建响应数据(数据)
```
####响应案例:
```墨香中文编程 
351100变量名类型备用备注8|11|4|341|2|3|4
350000数据VUE数据用于当前全局可以操作的动态响应数据
350000上传样式CSS样式对象
 // 响应式对象 - 变化会被 Vue 追踪
数据.名称 = '上传图片'
数据.测试 = '点击它可以出现一个新按钮'
数据.可视 = 假
数据.图标 = '<Edit />'
数据.上传字段名 = 'file'

数据.上传地址 = 'http://api.example.com/upload'
数据.上传文件列表 = []
数据.请求头 = {}
 // 设置上传样式
上传样式.width = "300px"
 // ...其他样式
数据.上传样式 = 上传样式
 // 如果需要动态响应数据，则需要通过以下命令转换。
数据 = VUE_创建响应数据(数据)

```


##事件接口
输出在单独代码框

###挂接事件: 以下是一个事件的完整代码 `xx名称` 部分才是可修改部分 
231000,241100,351100这三行均为代码格式固定不允许修改。 如果没有参数:240000内容则241100移除。 如果没有变量:351100内容则351100移除。
```墨香中文编程 
231000子程序名返回值类型异步公开备注8|10|4|4|6|121|2|3|4|5-6
230100事件名称事件备注
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000参数名称文本型我是参数备注
351100变量名类型备用备注8|6|4|161|2|3|4
350000局部名称数值型我是局部变量备注
调试输出(参数)

```
####挂接事件代码案例:
```墨香中文编程 
231000子程序名返回值类型异步公开备注12|10|4|4|6|101|2|3|4|5-6
230100事件上传成功上传成功回调事件
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000response通用型
调试输出("上传成功！响应数据：", response)
数据.上传文件列表 = 数据.上传文件列表 + response.fileList

231000子程序名返回值类型异步公开备注12|10|4|4|6|101|2|3|4|5-6
230100事件上传失败上传失败回调事件
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000errorInfo通用型
调试输出("上传失败！错误信息：", errorInfo)

```
##严格遵守标准 任何事件括号中的参数必须同一行，禁止换行，例如:
ELM_上传_创建()的所有 23 个参数必须在同一行内填写，中间用英文逗号分隔，禁止换行
