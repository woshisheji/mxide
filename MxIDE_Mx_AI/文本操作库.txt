##中文库名称:文本操作库

### 函数列表:
| **函数名**       | **函数原名** | **函数返回类型** | **函数所属对象** | **说明**                                                                 |
|%s.length|文本_取长度()|数值型|面向过程|	返回字符串的长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
||``| `文本型` | ``| 文本变量 |
|%s.charAt(%s)|文本_取指定位置内容(,1)|文本型|面向过程|返回指定位置的字符 注:仅返回一个字符|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取长度()|``| `文本型` | ``| 文本变量 ||文本_取长度()|`1`| `数值型` | `1`|  |
|%s.concat(%s)|文本_拼接(,)|文本型|面向过程|连接两个字符 返回新的内容|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取指定位置内容(,1)|``| `文本型` | ``| 拼接的内容一 ||文本_取指定位置内容(,1)|``| `文本型` | ``| 拼接的内容二 |
|%s.includes(%s)|文本_是否包含(,)|逻辑型|面向过程|检查字符串是否包含指定的子字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_拼接(,)|``| `文本型` | ``| 文本型变量 ||文本_拼接(,)|``| `文本型` | ``| 要被查询的内容 |
|%s.indexOf(%s)|文本_取字符首次位置(,)|数值型|面向过程|返回指定子字符串首次出现的位置|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_是否包含(,)|``| `文本型` | ``| 文本内容 ||文本_是否包含(,)|``| `文本型` | ``| 要检查的字符 |
|%s.indexOf(%s)|文本_取字符最后位置(,)|数值型|面向过程|返回指定子字符串最后一次出现的位置|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取字符首次位置(,)|``| `文本型` | ``| 文本变量 ||文本_取字符首次位置(,)|``| `文本型` | ``| 要检查的内容 |
|%s.replace(%s, %s)|文本_替换(,,)|文本型|面向过程|替换字符串中的某个子字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取字符最后位置(,)|``| `文本型` | ``| 文本变量 ||文本_取字符最后位置(,)|``| `文本型` | ``| 要被替换的内容 ||文本_取字符最后位置(,)|``| `文本型` | ``| 替换后的内容 |
|%s.slice(%s, %s)|文本_取内容(,,)|文本型|面向过程|提取字符串的某个部分，并返回新的字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_替换(,,)|``| `文本型` | ``| 文本变量 ||文本_替换(,,)|``| `数值型` | ``| 提取的起始位置（包含） 如果为负数，则表示从末尾开始计算的位置 ||文本_替换(,,)|``| `数值型` | ``| 是提取的结束位置（不包含）如果为负数，则表示从末尾开始计算的位置 |
|%s.split(%s)|文本_分割(,"")|数组型|面向过程|将字符串分割为数组|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取内容(,,)|``| `文本型` | ``| 文本变量 ||文本_取内容(,,)|`""`| `文本型` | `""`| "" 则为 逐字分割 |
|%s.substring(%s, %s)|文本_取内容Ex(,,)|文本型|面向过程|提取字符串中介于两个指定下标之间的字符 不支持负数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_分割(,"")|``| `文本型` | ``| 文本型变量 ||文本_分割(,"")|``| `数值型` | ``| 为负数，会被视为 0 ||文本_分割(,"")|``| `数值型` | ``| 不包含该位置的字符 为负数，会被视为 0 大于字符串长度，会被视为字符串长度。 |
|%s.toLowerCase()|文本_到小写()|文本型|面向过程|将字符串转换为小写|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取内容Ex(,,)|``| `文本型` | ``| 文本内容 |
|%s.toUpperCase()|文本_到大写()|文本型|面向过程|将字符串转换为大写|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_到小写()|``| `文本型` | ``| 文本内容 |
|%s.trim()|文本_删首尾空()|文本型|面向过程|去除字符串两端的空白字符|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_到大写()|``| `文本型` | ``| 文本内容 |
|%s.startsWith(%s)|文本_匹配开头(,)|逻辑型|面向过程|检查字符串是否以指定的子字符串开头|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_删首尾空()|``| `文本型` | ``| 文本内容 ||文本_删首尾空()|``| `数值型` | ``| 匹配长度 |
|%s.endsWith(%s)|文本_匹配结尾(,)|逻辑型|面向过程|检查字符串是否以指定的子字符串结尾|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_匹配开头(,)|``| `文本型` | ``| 文本内容 ||文本_匹配开头(,)|``| `文本型` | ``| 匹配长度 |
|%s.match(%s)|文本_正则匹配(,)|文本型|面向过程|使用正则表达式匹配字符串，并返回匹配结果|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_匹配结尾(,)|``| `文本型` | ``| 文本内容 ||文本_匹配结尾(,)|``| `文本型` | ``| 正则表达式 |
|%s.search(%s)|文本_正则搜索(,)|数值型|面向过程|使用正则表达式搜索字符串，并返回匹配的索引|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_正则匹配(,)|``| `文本型` | ``| 文本内容 ||文本_正则匹配(,)|``| `文本型` | ``| 正则表达式 需要 |
|%s.padStart(%s, %s)|文本_填充左侧(,,)|文本型|面向过程|在字符串开头填充指定字符，直到字符串达到指定长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_正则搜索(,)|``| `文本型` | ``| 文本内容 ||文本_正则搜索(,)|``| `数值型` | ``| 文本最终要被填充到的长度比如 5 填充内容为0 长度为 3 则结果是 003 ||文本_正则搜索(,)|``| `文本型` | ``| 要被填充的内容 例如 " "  |
|%s.padEnd(%s, %s)|文本_填充右侧(,,)|文本型|面向过程|在字符串结尾填充指定字符，直到字符串达到指定长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_填充左侧(,,)|``| `文本型` | ``| 文本内容 ||文本_填充左侧(,,)|``| `数值型` | ``| 文本将要填充到的长度 例如 文本 5 长度 3 填充 0 结果:500 ||文本_填充左侧(,,)|``| `文本型` | ``| 填充内容 |
|%s.repeat(%s)|文本_填充重复(,)|文本型|面向过程|将字符串重复指定次数|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_填充右侧(,,)|``| `文本型` | ``| 要填充的内容 ||文本_填充右侧(,,)|``| `数值型` | ``| 将填充内容重复次数 |
|%s.charCodeAt(%s)|文本_取Unicode编码(,)|数值型|面向过程|返回指定位置字符的Unicode编码 范围是 0 到 65535|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_填充重复(,)|``| `文本型` | ``| 文本内容 ||文本_填充重复(,)|``| `数值型` | ``| 查询的位置 |
|%s.codePointAt(%s)|文本_取Unicode码点(,)|数值型|面向过程|返回指定位置字符的Unicode码点 这是一个 Unicode 扩展字符，占用两个码元|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|
|文本_取Unicode编码(,)|``| `文本型` | ``| 文本内容 ||文本_取Unicode编码(,)|``| `数值型` | ``| 要查询的位置 |
|length|长度()|数值型|文本型|返回字符串的长度|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

|toString()|到文本()|文本型|文本型|将字符串对象转换为字符串|
### 参数列表:
| **参数名**| **参数原名**| **参数类型**| **默认值**| **说明**|

### 常量列表:
| **常量名**| **常量原名**| **常量类型** | **说明** |
| 换行符 | `"\n"` | `文本型` | \n |

##使用说明:

当命令有 ""开头 则最后有 !! 命令形成闭环，闭环中不允许将`响应数据ref`和`事件接口`部分写到这里。

```墨香中文编程 
!!ELM_滑块_创建(参数一,参数二,参数三)
//这里是其他组件插槽
""ELM_滑块_创建结束
```
###代码规则
####在代码下一行添加注释 例如://这是注释内容，这一行可以换成真实注释。
#### 禁止方法`ELM_上传_创建()`的参数换行!
###代码使用案例
```墨香中文编程 
!!ELM_上传_创建('http://api.example.com/upload', #ELM_上传_请求方法_POST, 数据.请求头, 数据.上传文件列表, 假, 假, 数据.上传字段名, 假, true, , , &事件上传成功, &事件上传失败, , , , 1, 真, 真, 'image/*', , , #ELM_上传_列表类型_PICTURE_CARD, '', 数据.上传样式, 当前.名称)

""ELM_上传_创建结束()
```
##规则二
###如果命令中例如：ELM_xx()，命令前面并没有开头则表示普通方法命令，不需要结束语句闭环。
###普通方法参数也必须在一行不允许换行，例如:

```墨香中文编程 
ELM_按钮_创建('','',false,false,false,false,false,false,'button','','', ,'','墨香中文编程')
```

##响应数据ref
输出在单独代码框

###ref绑定数据在**VUE模板**中:所有成员都放在 `数据` 对象上
```墨香中文编程 
351100变量名类型备用备注8|11|4|341|2|3|4
350000数据VUE数据用于当前全局可以操作的动态响应数据
数据.滑块值=1
数据 = VUE_创建响应数据(数据)
```
####响应案例:
```墨香中文编程 
351100变量名类型备用备注8|11|4|341|2|3|4
350000数据VUE数据用于当前全局可以操作的动态响应数据
350000上传样式CSS样式对象
 // 响应式对象 - 变化会被 Vue 追踪
数据.名称 = '上传图片'
数据.测试 = '点击它可以出现一个新按钮'
数据.可视 = 假
数据.图标 = '<Edit />'
数据.上传字段名 = 'file'

数据.上传地址 = 'http://api.example.com/upload'
数据.上传文件列表 = []
数据.请求头 = {}
 // 设置上传样式
上传样式.width = "300px"
 // ...其他样式
数据.上传样式 = 上传样式
 // 如果需要动态响应数据，则需要通过以下命令转换。
数据 = VUE_创建响应数据(数据)

```


##事件接口
输出在单独代码框

###挂接事件: 以下是一个事件的完整代码 `xx名称` 部分才是可修改部分 
231000,241100,351100这三行均为代码格式固定不允许修改。 如果没有参数:240000内容则241100移除。 如果没有变量:351100内容则351100移除。
```墨香中文编程 
231000子程序名返回值类型异步公开备注8|10|4|4|6|121|2|3|4|5-6
230100事件名称事件备注
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000参数名称文本型我是参数备注
351100变量名类型备用备注8|6|4|161|2|3|4
350000局部名称数值型我是局部变量备注
调试输出(参数)

```
####挂接事件代码案例:
```墨香中文编程 
231000子程序名返回值类型异步公开备注12|10|4|4|6|101|2|3|4|5-6
230100事件上传成功上传成功回调事件
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000response通用型
调试输出("上传成功！响应数据：", response)
数据.上传文件列表 = 数据.上传文件列表 + response.fileList

231000子程序名返回值类型异步公开备注12|10|4|4|6|101|2|3|4|5-6
230100事件上传失败上传失败回调事件
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000errorInfo通用型
调试输出("上传失败！错误信息：", errorInfo)

```
##严格遵守标准 任何事件括号中的参数必须同一行，禁止换行，例如:
ELM_上传_创建()的所有 23 个参数必须在同一行内填写，中间用英文逗号分隔，禁止换行
