171000类名备注12|12|4|901|2-3-4
170100玩家类用于玩家数据存储的部分
121100变量名类型公开备注1|2|3|4
120000物品玩家数组数组型玩家用于存储当前玩家装备数据
120000装备记录装备记录类型
120000
120000index数值型当前玩家在服务端数组中的位置
120000属性玩家属性当前玩家的属性，必须与数据库一模一样，有需求属性直接数据库加。注外部仅仅只能获取
120000套接字数值型记录每个用户上线时候分配的套接字
120000accountid数值型玩家的账号ID 在  玩家登录  中已经赋值
120000acc文本型当前账号，判断是否登录
120000怪物数组数组型当前玩家所在地图，挂接的怪物数据，用于开启挂机时候从怪物里面生成
120000宠物对象型玩家的宠物记录，用于宠物绑定，宠物功能
120000开始挂机逻辑型真则开启挂机线程
120000攻击目标数值型当前被攻击的怪物对象 0 则表示清空
120000上次攻击时间数值型用于判断两次攻击时间
120000开始PVP逻辑型
120000PVP对象玩家类挂接要PVP的对象
120000PVP挂接逻辑型0 没有挂接拷贝对象1挂接了拷贝对象 击杀后要记得归0
120000摆摊状态逻辑型真 则在摆摊状态，背包物品点击时候会多出一个上架摊位功能 只允许获取
120000摊位索引数值型当前点击的摊位索引。 只允许获取
120000队伍状态数值型是否存在队伍 0 没有队伍，1是队长，2是队员
120000队伍索引数值型玩家在队伍数组中的索引，属于那个队伍
120000
120000变量值表键值表玩家用来存动态变量的，会在上线时候读取 玩家变量表 ，记录到这个变量表中，这里就不用数组了。
120000变量时表键值表用于同步记录上面值的到期时间 
120000
120000副本逻辑型是否进入了副本
120000倒计时数值型副本倒计时 一般可以不管。不过下线时候清0以下最好
120000副本到期时间数值型进入副本后的赋值时间
4=1100常量名类型公开初始值备注8|6|4|6|381|2|3|4|5
4=0000背包数量数值型200玩家背包最多道具，超出则不会在增加了。
4=0000仓库数量数值型300仓库最大格子数量
 // 初始化刷怪数据

231000方法名返回值类型异步公开备注6|10|4|4|41|2|3|4|5-6
230100取属性玩家属性
返回(属性)

231000方法名返回值类型异步公开备注6|10|4|4|6|561|2|3|4|5-6
230100置属性设置属性注意仅只能通过原始属性，修改覆盖，如果是新的，则会替换
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000属性_玩家属性
属性 = 属性_
231000方法名返回值类型异步公开备注10|10|4|4|41|2|3|4|5-6
230100刷怪初始化
刷怪数组 = []
!!计次循环首(9, i)
let n = {}
数组加入成员末尾(刷怪数组, n)
""计次循环首结束()


231000方法名返回值类型异步公开备注7|10|4|4|6|271|2|3|4|5-6
230100上线Ex玩家客户端登录 记录当前玩家的属性
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000套接字_数值型服务端的用户套接字
240000属性_对象型通过数据库读取到的数据传入
240000物品数组型玩家当前物品
240000index_数值型
套接字 = 套接字_
 // 玩家登录上线//
属性 = 属性_
 // 上线时候是乜有队伍的
队伍索引 =- 1

index = index_
!!如果(物品 != 未定义 且 物品.#长度 > 0)
物品玩家数组 = 物品
 // 服务端计算玩家穿戴的物品属性//
!!数组循环(物品玩家数组, i)
 // 注：与易语言不同的是 数组从0成员开始
let 玩物 = 物品玩家数组[i]
服务端调试输出('玩家物品位置：' + 玩物.位置)
 // 装备对象要设定键值
let 类型 = 玩物.位置
let 标记 = ''
!!如果(类型 == 位置_装备手镯)
标记 = '手镯'
#*否则如果(类型 == 位置_装备武器)
标记 = '武器'
#*否则如果(类型 == 位置_装备衣服)
标记 = '衣服'
#*否则如果(类型 == 位置_装备帽子)
标记 = '帽子'
#*否则如果(类型 == 位置_装备项链)
标记 = '项链'
#*否则如果(类型 == 位置_装备鞋子)
标记 = '鞋子'
##否则
 // 系统提示框.弹出(0, 0, '当前物品未知分类无法使用', 4, 238, 12, 0xFFFFFF, ['确定'])
 // 提示核心(套接字, '当前上线物品未知分类无法使用', )
 // 返回(0)
""如果结束()


 // 注：今更新属性即可，客户端首次上线会有分类穿戴操作
!!如果(标记 != 未定义 且 玩物.位置 > 0 且 玩物.位置 <= 20)
装备记录[标记] = 玩物.id
 // 
玩家属性更新(玩物, 未定义)
""如果结束()
 // 
""数组循环结束()
""如果结束()



231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100穿脱装备如果返回不是0 则表示原本身上有这个装备
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000obj物品基础当前穿戴装备的物品基础对象
240000item玩家物品类型玩家的物品数据
240000流水ID数值型
240000是否穿上逻辑型真 穿 假 脱
351100变量名类型备用备注8|12|4|41|2|3|4
350000原本装备玩家物品类型
!!如果(obj == 未定义 或 item == 未定义)
返回(0)
""如果结束()
原本装备 = 0
 // 根据当前装备类型穿戴装备
let 类型 = obj.类型
 // 用于记录位置
let 标记 = ''
 // 
!!如果(类型 == 位置_装备手镯)
标记 = '手镯'
#*否则如果(类型 == 位置_装备武器)
标记 = '武器'
#*否则如果(类型 == 位置_装备衣服)
标记 = '衣服'
#*否则如果(类型 == 位置_装备帽子)
标记 = '帽子'
#*否则如果(类型 == 位置_装备项链)
标记 = '项链'
#*否则如果(类型 == 位置_装备鞋子)
标记 = '鞋子'
##否则
 // 系统提示框.弹出(0, 0, '当前物品未知分类无法使用', 4, 238, 12, 0xFFFFFF, ['确定'])
提示核心(套接字, '当前物品未知分类无法使用', )
返回(0)
""如果结束()
!!如果(是否穿上)
 // 注，这里不能记录对象，只能记录穿戴装备的流水ID，因为没有深拷贝可能会出现对象穿插问题。
!!如果(装备记录[标记] != 0)
 // 将原本装备放到背包位置
原本装备 = 物品查找(装备记录[标记])
 // 原本装备放到背包中
原本装备.位置 = 位置_背包
 // 更新脱下装备属性
 // 更新数据库装备位置
let Sql = 文本替换(数据配置.装备修改 , '#id' ,装备记录[标记])
Sql =文本替换(Sql, '#key', '位置')
Sql =文本替换(Sql, '#value', 位置_背包)
数据库执行(Sql, 1)
玩家属性更新(未定义, 原本装备)
""如果结束()
 // 记录新装备
装备记录[标记] = item.id
 // 新装备放到装备格子 当前类型就是要穿戴的格子~
item.位置 = 类型
 // 
let Sql = 文本替换(数据配置.装备修改 , '#id' ,装备记录[标记])
Sql =文本替换(Sql, '#key', '位置')
Sql =文本替换(Sql, '#value', 类型)
数据库执行(Sql, 1)
 // 
玩家属性更新(item, 未定义)
##否则
 // 仅仅只是脱下装备，要将装备放到包裹中。应当检测下包裹格子是否允许放入物品
let 原始装备 = 物品查找(装备记录[标记])
 // 原本装备放到背包中
原始装备.位置 = 位置_背包
 // 更新数据库装备位置
let Sql = 文本替换(数据配置.装备修改 , '#id' ,装备记录[标记])
Sql =文本替换(Sql, '#key', '位置')
Sql =文本替换(Sql, '#value', 位置_背包)
数据库执行(Sql, 1)
 // 清空装备
装备记录[标记] = 0
 // 
玩家属性更新(未定义, 原始装备)
""如果结束()
 // 组包
let Json = {}
!!如果(是否穿上)
Json.hex = 2004
##否则
Json.hex = 2005
""如果结束()
 // 记录操作//
 // 客户端部分由客户端的两个物品数据交换
Json.id = 流水ID
Json.key = 标记
Json.lookface = obj.图标
 // 
Json.info = 属性
 // 
服务端数据发送(套接字, Json)

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100玩家属性更新
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000obj玩家物品类型未定义穿装备
240000ret玩家物品类型未定义脱装备 如果没有要脱下的装备则 未定义

!!如果(obj != 未定义 且 obj != 0)

属性.物攻 =~~ 属性.物攻 +~~ obj.物攻
属性.物防 =~~ 属性.物防 +~~ obj.物防

属性.魔攻 =~~ 属性.魔攻 +~~ obj.魔攻
属性.魔防 =~~ 属性.魔防 +~~ obj.魔防

属性.道术 =~~ 属性.道术 +~~ obj.道术

属性.命中 =~~ 属性.命中 +~~ obj.命中

属性.生命大 =~~ 属性.生命大 +~~ obj.生命

属性.敏捷 =~~ 属性.敏捷 +~~ obj.敏捷
属性.幸运 =~~ 属性.幸运 +~~ obj.幸运
属性.闪避 =~~ 属性.闪避 +~~ obj.闪避
属性.攻速 =~~ 属性.攻速 +~~ obj.攻速


服务端调试输出('穿上装备' + 属性.物攻 + '-' + 属性.物防 + "-攻速：" + obj.攻速)
 // 判断
!!如果(obj.魔魂 > 0)
 // 有属性给与玩家更新
let 锻造属性 = 附魔表查找属性(obj.物品ID, obj.魔魂)
!!如果(锻造属性 != 0)
属性.物攻 =~~ 属性.物攻 +~~ 锻造属性.物攻
属性.魔攻 =~~ 属性.魔攻 +~~ 锻造属性.魔攻

属性.物防 =~~ 属性.物防 +~~ 锻造属性.物防
属性.魔防 =~~ 属性.魔防 +~~ 锻造属性.魔防

属性.道术 =~~ 属性.道术 +~~ 锻造属性.道术

""如果结束()
""如果结束()

""如果结束()
 // 脱下
!!如果(ret != 未定义 且 ret != 0)
属性.物攻 =~~ 属性.物攻 -~~ ret.物攻
属性.物防 =~~ 属性.物防 -~~ ret.物防

属性.魔攻 =~~ 属性.魔攻 -~~ ret.魔攻
属性.魔防 =~~ 属性.魔防 -~~ ret.魔防

属性.道术 =~~ 属性.道术 -~~ ret.道术

属性.命中 =~~ 属性.命中 -~~ ret.命中

属性.生命大 =~~ 属性.生命大 -~~ ret.生命

属性.敏捷 =~~ 属性.敏捷 -~~ ret.敏捷
属性.幸运 =~~ 属性.幸运 -~~ ret.幸运
属性.闪避 =~~ 属性.闪避 -~~ ret.闪避
属性.攻速 =~~ 属性.攻速 -~~ ret.攻速

 // 脱下来的装备魔魂等级处理
!!如果(ret.魔魂 > 0)
 // 有属性给与玩家更新
let 锻造属性 = 附魔表查找属性(ret.物品ID, ret.魔魂)
!!如果(锻造属性 != 0)
属性.物攻 =~~ 属性.物攻 -~~ 锻造属性.物攻
属性.魔攻 =~~ 属性.魔攻 -~~ 锻造属性.魔攻

属性.物防 =~~ 属性.物防 -~~ 锻造属性.物防

属性.魔防 =~~ 属性.魔防 -~~ 锻造属性.魔防

属性.道术 =~~ 属性.道术 -~~ 锻造属性.道术

""如果结束()
""如果结束()

""如果结束()

231000方法名返回值类型异步公开备注6|10|4|4|421|2|3|4|5-6
230100下线玩家下线。清空当前玩家所有数据，不进入缓存
 // 记录玩家部分不重要数据  可以写一句。这里偷个懒

 // 玩家数据修改(属性.角色ID, 'minlife', 数据.生命最小)
玩家数据修改(属性.id, '经验', 属性.经验)
玩家数据修改(属性.id, '等级', 属性.等级)
玩家数据修改(属性.id, '生命小', 属性.生命小)
玩家数据修改(属性.id, '金币', 属性.金币)
玩家数据修改(属性.id, '点券', 属性.点券)
玩家数据修改(属性.id, '地图ID', 属性.地图ID)
玩家数据修改(属性.id, 'x', 属性.x)
玩家数据修改(属性.id, 'y', 属性.y)
 // 清空数据
属性 = {}
 // 玩家下线，套接字设置为 0 为了上线时候查找房间号
 // 清空所有物品
物品玩家数组 = []
 // 清空穿戴
装备记录 = {}
 // 
套接字 = 0
acc = 0
accountid = 0
怪物数组 = []
开始挂机 = 假
攻击目标 = 0
上次攻击时间 = 0
 // 
PVP对象 = 0
开始PVP = 假

队伍状态 = 0
队伍索引 =- 1

变量值表 = {}
变量时表 = {}

副本 = 假
倒计时 = 0

怪物数组 = []

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品添加数值型对玩家背包添加物品 同步写入数据库
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000物品ID数值型物品ID
240000是否掉落逻辑型未定义真 则是掉落系统，会随机一些属性
 // 通过物品ID获取物品基础属性
!!如果(是否掉落 == 未定义)
是否掉落 = 假
""如果结束()


let obj = 物品基础查找(物品ID)
!!如果(obj == 0)
返回( - 1)
""如果结束()
 // 检测玩家背包是否满了
!!如果(物品玩家数组.#长度 >= 背包数量)
返回(0)
""如果结束()
 // 写入数据库返回流水ID
 // 这里属于登录成功 传输玩家当前的角色库信息过去。
Sql = 数据配置.物品插入
Sql = 文本替换( Sql ,'#itemid'  , 物品ID)
Sql = 文本替换( Sql ,'#userid'  , 属性.id)
Sql = 文本替换( Sql ,'#pos'  , 位置_背包)
服务端调试输出("Sql：" + Sql)
 // 无论成失败都只会返回Json数据
let Ret = 数据库执行取ID(Sql, 1, 1)
 // 转到Json配置
let Sjson = 数据Json字符串到对象(Ret)
 // 检测账号是否存在
!!如果(Sjson.errcode != 200)
提示核心(数据.角色ID, '数据库异常')
返回(0)
""如果结束()
 // 
let 物品流水ID = Sjson.ID
 // 位置 -> 1 - 20(为装备格子栏目, 之类所有的都被判断为装备)
 // 包裹位置 51
 // 仓库位置 201
let item = 申明自定义(玩家物品类型)
item.id = 到数值(物品流水ID)
item.物品ID = 物品ID
item.基础对象 = obj
item.位置 = 位置_背包
 // 扩展属性
item.魔魂 = 0
 // 附加属性 因为魔魂锻造属于另外一个表
item.魔魂攻击 = 0 // 魔魂属性
item.魔魂防御 = 0 // 魔魂属性
 // 这里可以修改物品数据库属性

数组加入成员末尾(物品玩家数组, item)
返回(物品流水ID)



231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品转移将世界中的物品从一个玩家身上转入到另外一个玩家身上
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000转移到用户玩家类
240000流水ID数值型
 // 数据库转移
物品数据修改(流水ID, 'userid', 转移到用户.数据.角色ID)
 // 内存转移
 // 先从自身删除
!!数组循环(物品玩家数组, i)
!!如果(物品玩家数组[i].流水ID == 流水ID)
 // 从玩家数组删除
let n = 数组删除成员(物品玩家数组, i, 1)
 // 转移到这个玩家库中
转移到用户.物品加入数组(n)

跳出循环()
""如果结束()
""数组循环结束()
 // 需要推送两次消息，一个是通知自身，删除物品，一个是推送转移者得到物品
 // 组包
let Json = {}
Json.hex = 1101
 // 推送客户端
Json.id = 流水ID
 // 通知当前玩家物品被删除
服务端数据发送(套接字, Json)



231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品转移背包将当前玩家背包的某个物品，转移到另外一个玩家身上 并推送删除消息 可用于交易系统
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000转移到用户玩家类
351100变量名类型备用备注10|6|4|41|2|3|4
350000临时物品组数组型

 // 先从自身删除
!!数组循环(物品玩家数组, i)
!!如果(物品玩家数组[i].位置 == 位置_背包)
 // 加入到临时数组
数组加入成员末尾(临时物品组, i)
""如果结束()
""数组循环结束()
 // 从背包数组中取出随机一个物品序号
!!如果(临时物品组.#长度 == 0)
返回(0)
""如果结束()
 // 
let n = 取随机数(0, 临时物品组.#长度 - 1)
 // 检查下是否有这个世界基础物品
let 基础 = 物品基础查找(物品玩家数组[n])
!!如果(基础 == 0)
返回(0)
""如果结束()
 // 删除玩家这个物品
let T = 数组删除成员(物品玩家数组, n, 1)
 // 将这个物品加入到转移用户的身上取
转移到用户.物品加入数组(T)
 // 数据库转移
物品数据修改(T.id, '玩家ID', 转移到用户.属性.id)
 // 
let Json = {}
 // 删除
Json = {}
Json.hex = 1101
Json.id = T.id
服务端数据发送(套接字, Json)
 // 添加
Json = {}
Json.hex = 1102
Json.id = T.id
Json.lookface = 基础.图标
服务端数据发送(转移到用户.套接字, Json)



231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品加入数组仅仅添加到数组
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000物品玩家物品类型
数组加入成员末尾(物品玩家数组, 物品)

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品删除从玩家背包删除物品 同步删除数据库
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型物品的唯一流水号
let obj = 0
!!数组循环(物品玩家数组, i)
!!如果(物品玩家数组[i].id == 流水ID)
 // 先从数据库删除物品
let Sql = 文本替换( 数据配置.物品删除 , '#id' ,流水ID )
 // 直接执行删除数据库了。也不校验了。没什么意义
数据库执行(Sql, 1)
 // 从玩家数组删除
数组删除成员(物品玩家数组, i, 1)
跳出循环()
""如果结束()
""数组循环结束()

231000方法名返回值类型异步公开备注12|10|4|4|341|2|3|4|5-6
230100物品获取摊位数组型从玩家身上获取摆放在摊位里面的物品
351100变量名类型备用备注8|6|4|41|2|3|4
350000物品数组数组型
let obj = 0
!!数组循环(物品玩家数组, i)
!!如果(物品玩家数组[i].位置 == 位置_摆摊)
let Item = {}
Item.id = 物品玩家数组[i].id // 流水ID
Item.物品ID = 物品玩家数组[i].物品ID
let 基础物品 = 物品基础查找(Item.物品ID)
!!如果(基础物品 == 0)
跳出循环()
""如果结束()
Item.lookface = 基础物品.图标 // 物品外观
Item.name = 基础物品.名称

数组加入成员末尾(物品数组, Item)

""如果结束()
""数组循环结束()
返回(物品数组)

231000方法名返回值类型异步公开备注8|12|4|4|521|2|3|4|5-6
230100物品掉落玩家物品类型随机从背包中掉落一个物品 返回 0 则表示运气好没有掉落
!!如果(物品玩家数组 == 未定义 或 物品玩家数组.#长度 == 0)
返回(0)
""如果结束()

let i = 取随机数(0, 物品玩家数组.#长度)
 // 要注意的是看运气，如果在背包就会掉落，在其他地方就不会了。
let obj = 申明自定义(玩家物品类型)
obj = 物品玩家数组[i]
!!如果(obj.位置 == 51)
返回(物品玩家数组[i])
""如果结束()
返回(0)


231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品使用客户端点击物品使用时候的函数入口
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型
240000数据对象对象型其中可能存在其他对象操作
let item = 物品查找(流水ID)
!!如果(item == 0)
 // 可以通知客户端提示当前物品异常或者直接不管
返回(0)
""如果结束()
 // 检测是否为装备或者道具，药品之类的
服务端调试输出("玩家使用道具" + item)
 // 检测物品属于什么类别，来决定使用效果
 // 这里仅只有药水可以使用
 // 从物品ID中获取基础属性
let obj = 物品基础查找(item.物品ID)
!!如果(obj == 0)
返回(0)
""如果结束()

 // 是否查找到当前ID的基础物品

 // 组包
let Json = {}
Json.hex = 2001
 // 如果是药水
!!如果(obj.id == 1000)
 // 吃药水恢复生命
!!如果(属性.生命小 <= 0)
 // 死亡了不能吃药 其实最好加入一个死亡状态变量。这里就只用生命值来判断了。
返回(0)
""如果结束()
属性.生命小 = 属性.生命小 + obj.生命
!!如果(属性.生命小 > 属性.生命大)
属性.生命小 = 属性.生命大
""如果结束()
 // 删除物品  其实这里使用药水，应该要检测生命是否满值，满了就不能吃，但这里不限制，吃了就给你消费掉
物品删除(流水ID)

#*否则如果(obj.id == 2000)
let ret = 修改名称(流水ID, 数据对象)
服务端调试输出("使用道具改名卡:" + ret)
!!如果(ret == 0)
返回(0)
""如果结束()
 // 通知客户端改名
Json.name = 数据对象.name
##否则
 // 未知使用物品，阻止处理
提示核心(套接字, '当前物品并没有使用逻辑~', )
返回(0)


""如果结束()

Json.id = 流水ID
Json.itemid = obj.id

服务端数据发送(套接字, Json)

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100修改名称数值型
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型
240000Json对象型
!!如果(Json.name == 未定义)
提示核心(套接字, '请输入角色名')
返回(0)
""如果结束()

let 名称长度 = 取文本长度(Json.name)
!!如果(名称长度 < 2)
提示核心(套接字, '角色名过短')
返回(0)
""如果结束()

!!如果(名称长度 > 14)
提示核心(套接字, '角色名过长')
返回(0)
""如果结束()
 // 查询角色名是否存在
let Sql = 数据配置.角色名查询
Sql = 文本替换( Sql , '#name' ,Json.name)
let ret = 数据库执行(Sql, 1)
服务端调试输出('角色:' + ret)
let 账号对象 = 数据Json字符串到对象(ret)
!!如果(账号对象.errcode != 200)
提示核心(数据.套接字, '数据异常')
返回(0)
""如果结束()
 // 
!!如果(账号对象.data[0] != 未定义)
提示核心(数据.套接字, '角色名已存在')
返回(0)
""如果结束()
 // 写入数据角色信息
玩家数据修改(数据.角色ID, 'name', Json.name)
 // 
属性.名称 = Json.name
 // 改名完毕删除道具
物品删除(流水ID)
返回(1)

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品查看客户端点击物品使用时候的函数入口
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型
240000是否锻造数值型1开锻造 0没开
let item = 物品查找(流水ID)
服务端调试输出('玩家查看物品从玩家身上找物品：' + item + ' 是否锻造:' + 是否锻造)
!!如果(item == 0)
 // 可以通知客户端提示当前物品异常或者直接不管
返回(0)
""如果结束()
let str = 物品属性气泡(item, 是否锻造, 摆摊状态)
 // 组包
let Json = {}
Json.hex = 2002
Json.str = str

服务端数据发送(套接字, Json)


231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100装备穿戴客户端点击物品使用时候的函数入口
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型
let item = 物品查找(流水ID)
服务端调试输出('玩家穿戴物品从玩家身上找物品：' + item)
!!如果(item == 0)
 // 可以通知客户端提示当前物品异常或者直接不管
返回(0)
""如果结束()
 // 服务端物品属性组合返回给客户端
 // 从物品ID中获取基础属性
let obj = 物品基础查找(item.物品ID)
 // 是否查找到当前ID的基础物品
 // 装备穿戴配置 服务端也要进行穿戴校验
穿脱装备(obj, item, 流水ID, 真)


231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100装备脱下客户端点击物品使用时候的函数入口
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型
let item = 物品查找(流水ID)
服务端调试输出('玩家脱下物品从玩家身上找物品：' + item)
!!如果(item == 0)
 // 可以通知客户端提示当前物品异常或者直接不管
返回(0)
""如果结束()
 // 检测背包是否有空格
let 数量 = 物品仓库数量()
!!如果(数量 < 1)
提示核心(套接字, '背包已满无法脱下装备', )
返回(0)
""如果结束()
 // 从物品ID中获取基础属性
let obj = 物品基础查找(item.物品ID)
 // 装备穿戴配置 服务端也要进行穿戴校验
穿脱装备(obj, item, 流水ID, 假)

服务端调试输出('玩家脱下物品从玩家身上找物品：' + obj.名称)

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100放入道具锻造时候，向锻造炉放入材料
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型玩家物品的流水ID
let item = 物品查找(流水ID)
服务端调试输出('玩家从背包准备向锻造炉放物品' + item)
!!如果(item == 0)
 // 可以通知客户端提示当前物品异常或者直接不管
提示核心(套接字, '该物品不存在~', )
返回(0)
""如果结束()
 // 从物品ID中获取基础属性
let obj = 物品基础查找(item.物品ID)
 // 获取到物品的基础类型，通过物品表中的类型来检测这个物品用途
服务端调试输出('玩家要放入的道具:' + obj.名称 + " 类型:" + obj.类型)
 // 对客户端推送 如果有需要可以先在服务端校验下，但其实无所谓，因为开启锻造时候还会校验。
 // 返回给客户端
let Json = {}
Json.hex = 2006
Json.modle = 1 // 放入材料
!!如果(obj.类型 > 0 且 obj.类型 < 20)
 // 玩家装备后期可能要扩充，所以预留了19个装备格子
Json.type = "装备"
#*否则如果(obj.类型 == 类型宝石)
Json.type = "宝石"
#*否则如果(obj.类型 == 类型幸运)
Json.type = "幸运"
##否则
提示核心(套接字, '该物品无法加入锻造炉~', )
返回(0)
""如果结束()

Json.id = 流水ID
Json.lookface = obj.图标

服务端数据发送(套接字, Json)

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100购买道具购买道具 注意，正常情况 商城里面会有用不同货币的商品
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型注意这是商城物品的流水ID
351100变量名类型备用备注6|10|4|41|2|3|4
350000商品商城配置表
商品 = 商城表查找(流水ID)
服务端调试输出('玩家购买物品从商城中找物品：' + 商品.名称)
!!如果(商品 == 0)
 // 可以通知客户端提示当前物品异常或者直接不管
返回(0)
""如果结束()
 // 检测玩家钱 这里默认就全点券了。根据需求自己改
!!如果(商品.价格 == 未定义)
商品.价格 = 1 // 强制卖1点券
""如果结束()
 // 如有需求自行修改成为点券
!!如果(属性.金币 <= 商品.价格)
提示核心(套接字, '阁下金币不足哦~', )
返回(0)
""如果结束()
 // 检测包裹
!!如果(物品玩家数组.#长度 >= 背包数量)
提示核心(套接字, '阁下包裹已满，请整理在购买~', )
返回(0)
""如果结束()
 // 都可以了直接买了
属性.金币 = 属性.金币 - 商品.价格
 // 更新数据库
玩家数据修改(属性.id, 'money', 属性.金币)
 // 增加物品到背包 有心的同学这里可以注意下，可能添加失败了钱扣了。。 所以可以这里先添加判断是否成功，然后扣钱。这里我就不处理了
let 物品流水ID = 物品添加(商品.物品ID)
 // 返回给客户端
let Json = {}
Json.hex = 2007
Json.id = 物品流水ID
Json.lookface = 商品.图标
Json.money = 属性.金币

服务端数据发送(套接字, Json)

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100取出仓库将仓库当前物品取回包裹
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000物品流水ID数值型
351100变量名类型备用备注8|12|4|41|2|3|4
350000基础物品基础
350000数量数值型
350000当前物品玩家物品类型
数量 = 物品背包数量()
!!如果(数量 <= 0)
提示核心(套接字, '背包已经满了，无法存放更多物品。', ['确定'])
返回(0)
""如果结束()
 // 开始将物品转移到仓库位置
当前物品 = 物品查找(物品流水ID)
!!如果(当前物品 == 0)
提示核心(套接字, '当前物品并不存在。', ['确定'])
返回(0)
""如果结束()
 // 检测当前物品是否在背包中，仅在背包的物品才可以放到仓库。
!!如果(当前物品.位置 != 位置_仓库)
提示核心(套接字, '当前物品并不在仓库，无法取出。', ['确定'])
返回(0)
""如果结束()
 // 原本背包位置转移到仓库中
当前物品.位置 = 位置_背包
 // 更新数据库装备位置
let Sql = 文本替换(数据配置.装备修改 , '#id' ,物品流水ID)
Sql =文本替换(Sql, '#key', '位置')
Sql =文本替换(Sql, '#value', 位置_背包)
数据库执行(Sql, 1)
 // 通知客户端，物品从背包转移到仓库中。
基础 = 物品基础查找(当前物品.物品ID)
!!如果(基础 == 0)
提示核心(套接字, '游戏世界中并不存在这种物品~', ['确定'])
返回(0)
""如果结束()
 // 返回给客户端
let Json = {}
Json.hex = 2009
Json.id = 物品流水ID
Json.lookface = 基础.图标
服务端数据发送(套接字, Json)


231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100存放仓库将当前物品存放到仓库中
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000物品流水ID数值型
351100变量名类型备用备注8|12|4|41|2|3|4
350000基础物品基础
350000数量数值型
350000当前物品玩家物品类型
数量 = 物品仓库数量()
!!如果(数量 <= 0)
提示核心(套接字, '仓库已经满了，无法存放更多物品。', ['确定'])
返回(0)
""如果结束()
 // 开始将物品转移到仓库位置
当前物品 = 物品查找(物品流水ID)
!!如果(当前物品 == 0)
提示核心(套接字, '当前物品并不存在。', ['确定'])
返回(0)
""如果结束()
 // 检测当前物品是否在背包中，仅在背包的物品才可以放到仓库。
!!如果(当前物品.位置 != 位置_背包)
提示核心(套接字, '当前物品并不在背包，无法存放。', ['确定'])
返回(0)
""如果结束()
 // 原本背包位置转移到仓库中
当前物品.位置 = 位置_仓库
 // 更新数据库装备位置
let Sql = 文本替换(数据配置.装备修改 , '#id' ,物品流水ID)
Sql =文本替换(Sql, '#key', '位置')
Sql =文本替换(Sql, '#value', 位置_仓库)
数据库执行(Sql, 1)
 // 通知客户端，物品从背包转移到仓库中。
基础 = 物品基础查找(当前物品.物品ID)
!!如果(基础 == 0)
提示核心(套接字, '游戏世界中并不存在这种物品~', ['确定'])
返回(0)
""如果结束()
 // 返回给客户端
let Json = {}
Json.hex = 2008
Json.id = 物品流水ID
Json.lookface = 基础.图标
服务端数据发送(套接字, Json)
231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100装备锻造客户端点击物品使用时候的函数入口
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000Json_锻造包客户端推送过来的锻造数据
351100变量名类型备用备注8|12|4|41|2|3|4
350000装备玩家物品类型
350000材料玩家物品类型
350000锻造配方锻造配置表
350000
!!如果(Json_.装备 ==  - 1)
提示核心(套接字, '需要被锻造的装备不存在', ['确定'])
返回(0)
""如果结束()
!!如果(Json_.宝石 ==  - 1)
提示核心(套接字, '锻造时候需要的宝石不存在', ['确定'])
返回(0)
""如果结束()
 // 在玩家身上找物品ID
装备 = 物品查找(Json_.装备)
材料 = 物品查找(Json_.宝石)

!!如果(装备 == 0 或 材料 == 0)
 // 可以通知客户端提示当前物品异常或者直接不管
提示核心(套接字, '装备或者材料数据不存在', ['确定'])
返回(0)
""如果结束()
 // 
服务端调试输出('玩家锻造物品从玩家身上找物品：' + 装备.id + ' 材料:' + 材料.id)
 // 从物品ID中获取基础属性
let 装备基础 = 申明自定义(物品基础)
装备基础 = 装备.基础对象
 // 
let 材料基础 = 申明自定义(物品基础)
材料基础 = 材料.基础对象
 // 锻造判断
锻造配方 = 附魔表查找(装备.物品ID, 装备.魔魂)
!!如果(锻造配方 == 0)
提示核心(套接字, '当前装备没有锻造配方无法锻造!', ['确定'])
返回(0)
""如果结束()
 // 继续锻造 这里可以自己修改更精准的随机
let 成功率 = 取随机数(1, 100)
 // 推送锻造结果给客户端
let Json = {}
Json.hex = 2006
Json.delid = "宝石" // 删除材料 客户端锻造组件其实不需要这个。传一下无所谓
Json.modle = 2 // 锻造类型
 // 改变装备属性
!!如果(成功率 <= 锻造配方.概率)
 // 锻造成功
装备.魔魂 = 装备.魔魂 + 1
Json.state = 1 // 成功装备
队伍消息推送(套接字, "锻造成功~")

##否则
 // 锻造失败
装备.魔魂 = 装备.魔魂 - 1
!!如果(装备.魔魂 < 0)
装备.魔魂 = 0
""如果结束()
Json.state = 0 // 失败状态
队伍消息推送(套接字, "锻造失败~")
""如果结束()
 // 没有做魔魂最高级检测，因为这里暂时不需要。配置不熬会提示不存在
Json.mohun = 装备.魔魂
 // 装备数据改变记录数据库
物品数据修改(装备.id, '魔魂', 装备.魔魂)
 // 消耗掉宝石
物品删除(材料.id)
 // 
服务端数据发送(套接字, Json)


231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品卖出
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型
351100变量名类型备用备注8|12|4|241|2|3|4
350000物品玩家玩家物品类型玩家物品表的属性可以更改
350000物品基础物品基础基础表的属性无法更改
物品玩家 = 物品查找(流水ID)
服务端调试输出('玩家卖出物品从玩家身上找物品：' + 物品玩家)
!!如果(物品玩家 == 0)
 // 可以通知客户端提示当前物品异常或者直接不管
返回(0)
""如果结束()
物品基础 = 物品基础查找(物品玩家.物品ID)
!!如果(物品基础 == 0)
返回(0)
""如果结束()
 // 从物品ID中获取基础属性
!!如果(物品玩家.位置 != 位置_背包)
提示核心(套接字, '当前物品不在[color=red]背包[/color]无法售卖!', )
返回(0)
""如果结束()
 // 检测是否属于被锻造过的装备
!!如果(物品玩家.魔魂 != 未定义 且 物品玩家.魔魂 > 0)
提示核心(套接字, '当前物品[color=red]' + 物品基础.name + '+' + 物品玩家.魔魂 + '[/color]过于珍贵 是否强制售卖!', ['强制'\\'取消'])
返回(0)
""如果结束()
 // 删除背包
物品删除(流水ID)
 // 调整价格
!!如果(物品基础.售价 == 未定义 或 物品基础.售价 == 0)
 // 强制卖1金币
物品基础.售价 = 1
""如果结束()
属性.金币 = 属性.金币 + 物品基础.售价
 // 更新数据库金币
let Sql = 文本替换(数据配置.角色修改 , '#id' ,属性.id )
Sql =文本替换(Sql, '#key', '金币')
Sql =文本替换(Sql, '#value', 属性.金币)
数据库执行(Sql, 1)
 // 组包
let Json = {}
Json.hex = 2003
Json.money = 属性.金币
Json.id = 流水ID
服务端数据发送(套接字, Json)
231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品查找玩家物品类型0表示不存在
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000流水ID数值型
!!数组循环(物品玩家数组, i)
 // 注：与易语言不同的是 数组从0成员开始
!!如果(物品玩家数组[i].id == 流水ID)
返回(物品玩家数组[i])
""如果结束()
""数组循环结束()
返回(0)

231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100物品查找ID玩家物品类型0表示不存在
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型通过物品ID查找
!!数组循环(物品玩家数组, i)
 // 注：与易语言不同的是 数组从0成员开始
!!如果(物品玩家数组[i].物品ID == ID)
返回(物品玩家数组[i])
""如果结束()
""数组循环结束()
返回(0)
231000方法名返回值类型异步公开备注12|10|4|4|201|2|3|4|5-6
230100物品背包数量数值型检测剩余背包格子数量
351100变量名类型备用备注6|6|4|41|2|3|4
350000总数数值型
!!数组循环(物品玩家数组, i)
 // 注：与易语言不同的是 数组从0成员开始
!!如果(物品玩家数组[i].位置 == 位置_背包)
总数 ++ 
""如果结束()
""数组循环结束()
!!如果(总数 >= 背包数量)
返回(0)
""如果结束()
返回(背包数量 - 总数)
231000方法名返回值类型异步公开备注12|10|4|4|201|2|3|4|5-6
230100物品仓库数量数值型检测剩余仓库格子数量
351100变量名类型备用备注6|6|4|41|2|3|4
350000总数数值型
!!数组循环(物品玩家数组, i)
 // 注：与易语言不同的是 数组从0成员开始
!!如果(物品玩家数组[i].位置 == 位置_仓库)
总数 ++ 
""如果结束()
""数组循环结束()
!!如果(总数 >= 仓库数量)
返回(0)
""如果结束()
返回(仓库数量 - 总数)
 // 
231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100置摆摊状态设置当前摆摊状态
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000状态逻辑型
摆摊状态 = 状态
 // 
231000方法名返回值类型异步公开备注1|2|3|4|5-6
230100置摊位索引设置摊位索引
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000索引数值型
摊位索引 = 索引
 // 






