171000程序集名备注8|41|2-3-4
170100玩家管理

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100玩家动态表加载读取 动态变量信息
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000玩家对象玩家类
240000ID数值型


let Sql = 文本替换(数据配置.变量获取,"#id", ID)
 // 
let ret = 数据库执行取ID(Sql, 1, 1)

let 数据对象 = 数据Json字符串到对象(ret)

服务端调试输出("数据配置.变量获取" + Sql)

!!如果(数据对象.errcode != 200)
返回(0)
""如果结束()
 // 初始化加载，要存到全局对象管理，用于下发给客户端的
!!数组循环(数据对象.data, i)
 // 注：与易语言不同的是 数组从0成员开始
let key = 数据对象.data[i].key
let value = 数据对象.data[i].value
玩家对象.变量值表[key] = value
玩家对象.变量时表[key] = 取时间戳()

""数组循环结束()



231000子程序名返回值类型异步公开备注8|10|4|4|6|521|2|3|4|5-6
230100玩家进入验证版一切需要验证的数据后，传入当前玩家的数据，进入登录。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型套接字
240000属性对象型玩家角色表的属性对象
240000物品数值型玩家物品列表
351100变量名类型备用备注6|6|4|41|2|3|4
350000index数值型
350000玩家玩家类
 // 查询是那个玩家
index = 玩家查找(ID)
!!如果(index ==  - 1)
提示核心(ID, '角色并不存在', )
返回(0)
##否则
 // 
玩家 = 数组玩家[index]
""如果结束()
玩家.上线Ex(ID, 属性, 物品, index)
 // 玩家上线获取动态变量表
玩家动态表加载(玩家, 属性.id)


231000子程序名返回值类型异步公开备注16|10|4|4|6|401|2|3|4|5-6
230100玩家进入回合战场这个包队当前战场里面所有成员进行一次发送即可。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型100测试备注参数
351100变量名类型备用备注6|6|4|161|2|3|4
350000Index数值型变量测试参数
350000玩家玩家类玩家变量测试参数
350000玩组数组型玩组变量测试参数
Index = 玩家查找(ID)

!!如果(Index ==  - 1)
返回(0)
""如果结束()
 // 
玩家 = 数组玩家[Index]
 // 
let 传递对象 = {}
传递对象.hex = 4000
传递对象.type = 4
传递对象.index = Index
 // 通知这个俺家进入回合战场
服务端数据发送(ID, 传递对象)



231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100玩家离开
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000是否不清空逻辑型传送地图就不需要清空，离线就清空 真则不清空
351100变量名类型备用备注6|6|4|41|2|3|4
350000Index数值型
350000玩家玩家类
350000玩组数组型
Index = 玩家查找(ID)

!!如果(Index ==  - 1)
返回(0)
""如果结束()
 // 
玩家 = 数组玩家[Index]
 // 
服务端调试输出("玩家离线:" + 玩家.属性.名称)

 // 通知其他人下线了。
玩组 = 玩家获取同地图(ID, 玩家.属性.地图ID)
 // 
let 传递对象 = {}
传递对象.hex = 4000
传递对象.type = 3
 // 
传递对象.index = Index
 // 
!!数组循环(玩组, i)
 // 注：与易语言不同的是 数组从0成员开始
服务端数据发送(玩组[i].套接字, 传递对象)

""数组循环结束()
 // 玩家离线，腾出它的房间，让下一个用户可以入住
!!如果(是否不清空)
服务端调试输出("玩家切图:" + 玩家.属性.名称)
返回(0)
""如果结束()
 // 默认是清空这个玩家所有数据
玩家.下线()


231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100玩家查找数值型返回当前查找到的套接字所在数组成员位置 -1表示不存在
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型套接字
!!数组循环(数组玩家, i)
 // 注：与易语言不同的是 数组从0成员开始
let 每个玩家 = 申明自定义(玩家类)
每个玩家 = 数组玩家[i]
 // 用户下线可能对象清空了不一定查找得到
!!如果(每个玩家.套接字 != 未定义 且 每个玩家.套接字 == ID)
返回(i)
""如果结束()
""数组循环结束()
返回( - 1)

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100玩家查找角色id数值型返回当前查找到的角色ID所在数组成员位置 -1表示不存在 这个摊位属于那个玩家
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000角色ID数值型
!!数组循环(数组玩家, i)
 // 注：与易语言不同的是 数组从0成员开始
let 每个玩家 = 申明自定义(玩家类)
每个玩家 = 数组玩家[i]
 // 用户下线可能对象清空了不一定查找得到
!!如果(每个玩家.属性.id != 未定义 且 每个玩家.属性.id == 角色ID)
返回(i)
""如果结束()
""数组循环结束()
返回( - 1)
231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100玩家查找账号数值型返回索引 -1表示不存在
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000账号数值型
!!数组循环(数组玩家, i)
 // 注：与易语言不同的是 数组从0成员开始
let 每个玩家 = 申明自定义(玩家类)
每个玩家 = 数组玩家[i]
 // 用户下线可能对象清空了不一定查找得到
!!如果(每个玩家.acc != 未定义 且 每个玩家.acc == 账号)
返回(i)
""如果结束()
""数组循环结束()
返回( - 1)
231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100玩家数据修改修改玩家数据字段
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000玩家ID文本型
240000字段名文本型
240000字段值文本型
let Sql = 文本替换(数据配置.角色修改 , '#id' ,玩家ID )
Sql =文本替换(Sql, '#key', 字段名)
Sql =文本替换(Sql, '#value',字段值)
数据库执行(Sql, 1)

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100物品数据修改修改玩家物品数据字段
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000物品流水ID文本型
240000字段名文本型
240000字段值文本型
let Sql = 文本替换(数据配置.装备修改 , '#id' ,物品流水ID )
Sql =文本替换(Sql, '#key', 字段名)
Sql =文本替换(Sql, '#value',字段值)
数据库执行(Sql, 1)

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100PVP获取人物数组型返回当前地图数组
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
351100变量名类型备用备注8|6|4|41|2|3|4
350000玩家数组数组型
350000人数数值型
!!数组循环(数组玩家, i)
let 信息 = 数组玩家[i].属性
 // 
!!如果(信息.名称 == 未定义)
到循环尾()
""如果结束()

!!如果(数组玩家[i].套接字 == 0 或 ID == 数组玩家[i].套接字)
到循环尾()
""如果结束()
 // 最多只获取16个，看需求可以自己加个下一页。这里默认就获取16人每次
人数 ++ 
!!如果(人数 > 16)
到循环尾()
""如果结束()

let 传递对象 = {}
传递对象.id = 信息.id
传递对象.名称 = 信息.名称
传递对象.等级 = 信息.等级
传递对象.经验值 = 信息.经验值
传递对象.生命值 = 信息.生命大
传递对象.攻击 = 信息.物攻
传递对象.魔法防御 = 信息.物防
传递对象.物理防御 = 信息.魔防
传递对象.攻击速度 = 信息.攻速
传递对象.积分 = 信息.积分
 // 
数组加入成员末尾(玩家数组, 传递对象)

""数组循环结束()
返回(玩家数组)


231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100排行榜获取人物数组型返回当前地图数组
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000最大人数数值型
351100变量名类型备用备注8|6|4|41|2|3|4
350000玩家数组数组型
350000人数数值型
!!数组循环(数组玩家, i)
let 信息 = 数组玩家[i].属性
 // 
!!如果(信息.名称 == 未定义)
到循环尾()
""如果结束()
 // 最多只获取16个，看需求可以自己加个下一页。这里默认就获取16人每次
人数 ++ 
!!如果(人数 > 最大人数)
到循环尾()
""如果结束()

let 传递对象 = {}
传递对象.id = 信息.id
传递对象.名称 = 信息.名称
传递对象.等级 = 信息.等级
传递对象.经验值 = 信息.经验值
传递对象.生命值 = 信息.生命大
传递对象.攻击 = 信息.物攻
传递对象.魔法防御 = 信息.物防
传递对象.物理防御 = 信息.魔防
传递对象.攻击速度 = 信息.攻速
传递对象.积分 = 信息.积分
 // 
数组加入成员末尾(玩家数组, 传递对象)

""数组循环结束()
返回(玩家数组)


231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100玩家获取同地图数组型返回当前地图数组
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型套接字
240000地图ID数值型
351100变量名类型备用备注8|6|4|41|2|3|4
350000玩家数组数组型
350000人数数值型
!!数组循环(数组玩家, i)
let 信息 = 申明自定义(玩家属性)
信息 = 数组玩家[i].属性

 // 
!!如果(信息.名称 == 未定义)
到循环尾()
""如果结束()
 // 只获取同地图的
!!如果(信息.地图ID != 地图ID)
到循环尾()
""如果结束()
 // 过滤自己
!!如果(数组玩家[i].套接字 == ID)
到循环尾()
""如果结束()
 // 属性.生命小, 属性.生命大
let 传递对象 = {}
传递对象.x = 信息.x
传递对象.y = 信息.y
传递对象.生命小 = 信息.生命小
传递对象.生命大 = 信息.生命大
传递对象.id = 信息.id // 玩家id
传递对象.名称 = 信息.名称
传递对象.等级 = 信息.等级
传递对象.index = i
传递对象.套接字 = 数组玩家[i].套接字 // 套接字
 // 如果需要外观的话，可以传，我这里就目前一个外观就没传
 // 
数组加入成员末尾(玩家数组, 传递对象)

""数组循环结束()
返回(玩家数组)



