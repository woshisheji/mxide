171000程序集名备注8|4|4|41|2-3-4
170100帮派服务
121100变量名类型公开备注1|2|3|4
120000

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100帮派_创建没有加入帮派的玩家可以申请创建一个帮派，需要道具和金币
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型玩家套接字
240000帮派名称文本型帮派名称
351100变量名类型备用备注6|6|4|221|2|3|4
350000index数值型玩家在数组中的成员位置
350000玩家玩家类玩家对象
 // 先查询玩家
index = 玩家查找(ID)
 // 
!!如果(index ==  - 1)
提示核心(ID, "玩家不存在", )
返回(0)
""如果结束()
 // 声明变量类型
玩家 = 数组玩家[index]
 // 检查玩家是否已经加入帮派
!!如果(玩家.帮派 != 0)
提示核心(ID, "你已经加入帮派，无法创建新帮派", )
返回(0)
""如果结束()
 // 检查创建条件（例如金币、道具等）
!!如果(玩家.金币 < 10000)
提示核心(ID, "创建帮派需要 10000 金币", )
返回(0)
""如果结束()
 // 创建帮派
let 帮派属性 = 申明自定义(帮派配置)
帮派属性.帮派名称 = 帮派名称
帮派属性.帮主ID = 玩家.属性.id
帮派属性.成员列表 = [] // 新建的帮派，配置一个成员数组
帮派属性.公告 = "欢迎加入本帮派！"
帮派属性.总贡献 = 0
 // 生成 SQL 语句，插入帮派到数据库
let Sql = 文本替换(数据配置.帮派插入, '#帮派名称', 帮派名称)
Sql = 文本替换(Sql, '#帮主ID', 帮派属性.帮主ID)
Sql = 文本替换(Sql, '#公告', 帮派属性.公告)
Sql = 文本替换(Sql, '#总贡献', 帮派属性.总贡献)
 // 执行数据库插入
let 执行结果 = 数据库执行取ID(Sql, 1, 1)
let 数据对象 = 数据Json字符串到对象(执行结果)
 // 检查插入是否成功
!!如果(数据对象.errcode != 200)
提示核心(ID, "帮派创建失败，数据库异常", )
返回(0)
""如果结束()
 // 获取插入的帮派 ID
let 帮派ID = 数据对象.ID
 // 将帮派数据加入内存数组
数组加入成员末尾(数组帮派, 帮派属性)
 // 更新玩家帮派信息
玩家.帮派 = 帮派ID
提示核心(ID, "帮派创建成功", )
返回(1)

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100帮派_解散帮主可以解散帮派，帮派所有玩家都退出帮派，且没有任何信息福利
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型帮主套接字
351100变量名类型备用备注8|10|4|221|2|3|4
350000index数值型玩家在数组中的成员位置
350000玩家玩家类玩家对象
350000帮派索引数值型帮派在数组中的索引
350000帮派属性帮派配置表帮派属性对象
 // 先查询玩家
index = 玩家查找(ID)
 // 
!!如果(index ==  - 1)
提示核心(ID, "玩家不存在", )
返回(0)
""如果结束()
 // 声明变量类型
玩家 = 数组玩家[index]
 // 检查玩家是否已经加入帮派
!!如果(玩家.帮派 == 0)
提示核心(ID, "你未加入任何帮派", )
返回(0)
""如果结束()
 // 查找帮派
帮派索引 = 玩家.帮派
帮派属性 = 数组帮派[帮派索引]
 // 检查是否是帮主
!!如果(帮派属性.帮主ID != 玩家.属性.id)
提示核心(ID, "只有帮主可以解散帮派", )
返回(0)
""如果结束()
 // 清空所有成员的帮派状态
let Sql = 文本替换(数据配置.帮派成员清空, '#帮派ID', 帮派索引)
数据库执行(Sql, 1)
 // 删除帮派
Sql = 文本替换(数据配置.帮派删除, '#帮派ID', 帮派索引)
数据库执行(Sql, 1)
 // 通知所有成员帮派解散
!!数组循环(帮派属性.成员列表, i)
let 成员属性 = 帮派属性.成员列表[i]
let 成员玩家 = 玩家查找角色id(成员属性.成员ID)
!!如果(成员玩家 !=  - 1)
数组玩家[成员玩家].帮派 = 0
提示核心(数组玩家[成员玩家].套接字, "帮派已解散", )
""如果结束()
""数组循环结束()
 // 删除帮派数据
数组删除成员(数组帮派, 帮派索引, 1)
提示核心(ID, "帮派解散成功", )
返回(1)
