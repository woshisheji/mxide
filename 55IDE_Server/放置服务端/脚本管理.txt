171000程序集名备注10|41|2-3-4
170100脚本管理集

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100npc脚本解析
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型玩家套接字
240000Json脚本数据
351100变量名类型备用备注7|8|4|41|2|3|4
350000玩家玩家类
350000地图地图类
350000脚本id数值型
350000npc成员数值型
350000npcnpc属性
350000属性玩家属性
350000index数值型
 // 
服务端调试输出('npc脚本解析' + ID + ' ' + Json.npcid + ' - ' + Json.actionid)

index = 玩家查找(ID)
!!如果(index ==  - 1)
返回(0)
""如果结束()
玩家 = 数组玩家[index]
属性 = 玩家.属性
 // 检测当前地图
npc = NPC表查找(Json.npcid)
!!如果(npc == 0)
服务端调试输出('这个NPC不存在~~')
返回(0)
""如果结束()
!!如果(npc.地图ID != 属性.地图ID)
服务端调试输出('这个NPC与玩家不在一个地图~~')
返回(0)
""如果结束()
!!如果(Json.actionid == 未定义)
 // 脚本解析ID
Json.actionid = 1
""如果结束()

 // 
let Str = 脚本执行(ID, npc.脚本ID, Json.actionid, 脚本类型_NPC, npc.index)
 // 
let Json_ = {}
 // 
Json_ = 数据Json初始化()
Json_.hex = 6003
Json_.id = Json.npcid
Json_.chat = Str

服务端数据发送(ID, Json_)


231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本处理使用脚本系统自带的事件，初始化得到的并非自行创建
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型套接字
240000TYPE数值型脚本TYPE功能值
240000Obj数值型游戏对象标记用于判断是哪一类对象
240000index数值型对象成员
240000Param数值型传进来的脚本param值
240000data文本型传入进来的脚本data值
351100变量名类型备用备注6|6|4|171|2|3|4
350000Ret文本型'0' 成功 '1' 失败
Ret = 脚本_失败

!!如果(TYPE == 1)
 // 提示推送(ID, Param, )
Ret = 脚本_成功
#*否则如果(TYPE == 101 或 TYPE == 102 或 TYPE == 103)
 // 那些type支持检测变量渲染就这里补上
Param = 脚本101对话(ID, Param, Obj, index)

Ret = 脚本_成功
#*否则如果(TYPE == 1003)
 // 传送地图功能
Ret = 脚本1003传送(ID, Param)
#*否则如果(TYPE == 501)
Ret = 脚本501给予物品(ID, data)
#*否则如果(TYPE == 502)
Ret = 脚本502删除物品(ID, data)
#*否则如果(TYPE == 503)
Ret = 脚本503检查物品(ID, data)
#*否则如果(TYPE == 510)
Param = 脚本101对话(ID, Param, Obj, index)

Ret = 脚本510提示框(ID, Param)

#*否则如果(TYPE == 511)
Param = 脚本101对话(ID, Param, Obj, index)

Ret = 脚本511系统提示(ID, Param)
#*否则如果(TYPE == 512)
Ret = 脚本512复活(ID)
#*否则如果(TYPE == 1010)
 // 设置玩家动态变量
Ret = 脚本1010玩家设置动态变量(ID, Param)
#*否则如果(TYPE == 1011)
 // 删除玩家动态变量
Ret = 脚本1011玩家删除动态变量(ID, Param)
#*否则如果(TYPE == 1012)
 // 修改玩家动态变量
Ret = 脚本1012玩家修改动态变量(ID, Param)
#*否则如果(TYPE == 1013)
 // 检查玩家动态变量
Ret = 脚本1013玩家检测动态变量(ID, Param)

#*否则如果(TYPE == 1030)
 // 打开界面
Ret = 脚本1030打开客户端界面(ID, data)
#*否则如果(TYPE == 2000)
Ret = 脚本2000刷怪功能(ID, Param)

#*否则如果(TYPE == 2001)
Ret = 脚本2001回合战斗触发(ID, data, Param)

""如果结束()

脚本返回(Ret, Param)

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本511系统提示
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000param文本型

队伍消息推送(ID, param, 未定义, 未定义)
 // 
返回(脚本_成功)


231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本512复活
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
351100变量名类型备用备注6|6|4|41|2|3|4
350000玩家玩家类
index = 玩家查找(ID)
 // 
!!如果(index ==  - 1)
返回(脚本_失败)
""如果结束()
 // 
玩家 = 数组玩家[index]
 // 设置生命满血
玩家.属性.生命小 = 玩家.属性.生命大
 // 推送封包
let Json = {}
Json.hex = 2010
服务端数据发送(ID, Json)
提示核心(ID, '你已经复活了', ['确定'])
 // 
返回(脚本_成功)



231000子程序名返回值类型异步公开备注15|10|4|4|6|101|2|3|4|5-6
230100脚本501给予物品
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型玩家套接字
240000data数值型物品ID
351100变量名类型备用备注6|6|4|41|2|3|4
350000index数值型
350000玩家玩家类
index = 玩家查找(ID)
 // 
!!如果(index ==  - 1)
返回(脚本_失败)
""如果结束()
 // 世界中是否有这个基础物品
let obj = 物品基础查找(data)
!!如果(obj == 0)
返回(脚本_失败)
""如果结束()
 // 
玩家 = 数组玩家[index]
 // 
let liushuiID = 玩家.物品添加(data)
 // 
let Json = {}
Json = {}
Json.hex = 1102
Json.id = liushuiID
Json.lookface = obj.图标
服务端数据发送(ID, Json)
返回(脚本_成功)
231000子程序名返回值类型异步公开备注15|10|4|4|6|61|2|3|4|5-6
230100脚本502删除物品
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000data数值型
351100变量名类型备用备注8|12|4|41|2|3|4
350000index数值型
350000玩家玩家类
350000玩家物品玩家物品类型
index = 玩家查找(ID)
 // 
!!如果(index ==  - 1)
返回(脚本_失败)
""如果结束()
 // 
玩家 = 数组玩家[index]
 // 这里删除物品的时候，是通过物品ID，但实际我们要找到流水ID
玩家物品 = 玩家.物品查找ID(data)
!!如果(玩家物品 == 0)
返回(脚本_失败)
""如果结束()
 // 
玩家.物品删除(玩家物品.id)
 // 
Json = {}
Json.hex = 1101
Json.id = 玩家物品.id
服务端数据发送(ID, Json)
返回(脚本_成功)
231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本503检查物品可以继续扩展数量，装备特殊属性等，通过param传入即可
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000data数值型
351100变量名类型备用备注8|12|4|41|2|3|4
350000index数值型
350000玩家玩家类
350000玩家物品玩家物品类型
index = 玩家查找(ID)
 // 
!!如果(index ==  - 1)
返回(脚本_失败)
""如果结束()
 // 
玩家 = 数组玩家[index]
 // 检查玩家是否有这个物品ID，查到物品即可
玩家物品 = 玩家.物品查找ID(data)
!!如果(玩家物品 == 0)
返回(脚本_失败)
""如果结束()
 // 物品存在
返回(脚本_成功)
231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本1003传送
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000Param文本型
351100变量名类型备用备注8|6|4|41|2|3|4
350000index数值型
350000玩家玩家类
350000传送参数数组型
 // 将当前玩家的信息传送到新的地图，通知客户端重新加载新的地图。
 // 1003 传送地图: 1 1000 10 10 600
 // 注解：类型，地图ID，坐标x，坐标y  ，倒计时(0表示永远存在) 
 // 类型=1 则普通传送地图 类似于MMO机制 属于一个普通公众地图，所有人都可以到达
 // 类型=2 动态传送地图，传送到这个地图时候，是一个动态创建的地图，创建时候有倒计时设定，倒计时结束后，会强制玩家退出当前地图，触发事件。
 // 类型=3 进入回合战斗战场 ，需要与 1004 搭配创建后续配置发送战场布局
 // 更新玩家到新的地图
index = 玩家查找(ID)
 // 
!!如果(index ==  - 1)
返回(脚本_失败)
""如果结束()
玩家 = 数组玩家[index]
 // 传送前重置
玩家.副本 = 假
 // 检测传送数据
传送参数 = 文本分割(Param, " ")
 // 
!!如果(传送参数.#长度 != 5)
提示核心(ID, "传送参数错误", )
返回(脚本_失败)
""如果结束()
 // 检测类型
!!如果( ~~ 传送参数[0] == 2)
 // 创建动态副本地图，会有时间记录，这个地图挂在这个玩家身上，正常来说地图有个标志，但放置类，暂时就不设置了，看自己需求吧。一般用来搞庄园的才要
玩家.动态地图 = {}
 // 设置动态地图关联ID,让队员知道去哪里了~ 后面要加个群体传送
玩家.动态地图.id = 到整数(传送参数[1])
 // 副本地图，进去就开始打怪，什么都不要想。
玩家.开始挂机 = 真
 // 
玩家.副本 = 真
 // 记录副本时间
玩家.倒计时 = 到整数(传送参数[4])
 // 记录回城ID
玩家.上个地图ID = 玩家.属性.地图ID
玩家.上个x = 玩家.属性.x
玩家.上个y = 玩家.属性.y
 // 加个
玩家.副本到期时间 = 玩家.倒计时 * 1000 + 取时间戳()

""如果结束()

!!如果( ~~ 传送参数[0] == 3)

 // 在回合模式中，通知客户端玩家进入回合战场，通知其他人删除这个玩家即可。因为要让其他人看不到他
玩家离开(ID, 真)
 // 进入回合推送下告诉玩家进入回合机制，客户端执行 进入回合战场即可
玩家进入回合战场(ID)

返回(脚本_成功)
""如果结束()
 // 强行将文本转换到整数 ~~ 表示到整数 其他传送模式都需要传出当前地图的信息
传送结果 = 玩家进入地图(ID,  ~~ 传送参数[1],  ~~ 传送参数[2],  ~~ 传送参数[3], 玩家.副本)
!!如果(传送结果 == 0)
返回(脚本_失败)
""如果结束()
 // 通知当前地图其他玩家，删除自己。因为自己传送了。
玩家离开(ID, 真)
 // 玩家下线时候更新数据
 // 玩家数据修改(玩家.属性.id, '地图ID', 传送参数[1])
 // 修改内存属性
玩家.属性.地图ID = 传送参数[1]
玩家.属性.x = 到整数(传送参数[2])
玩家.属性.y = 到整数(传送参数[3])

返回(脚本_成功)

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本510提示框1强化台 其他可以参考这个继续设计
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000param数值型
提示核心(ID, param, )

返回("0")
231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本1030打开客户端界面1强化台 其他可以参考这个继续设计
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000data数值型
 // 通知当前玩家客户端添加物品
Json = {}
Json.hex = 1030
Json.type = data
 // 
服务端数据发送(ID, Json)
返回("0")

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本1010玩家设置动态变量文本型设置玩家字段变量  1010  0  state  0  60 会对 userstate 插入一个记录  60秒后消失
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000Param文本型
351100变量名类型备用备注8|8|4|41|2|3|4
350000列表数组数组型
350000玩家索引数值型
350000玩家对象玩家类
350000属性玩家玩家属性
玩家索引 = 玩家查找(ID)
!!如果(玩家索引 ==  - 1)
返回(脚本_失败)
""如果结束()
 // 取出当前判断设定
列表数组 = 文本分割(Param, ' ')
!!如果(列表数组 == 未定义 或 列表数组.#长度 == 0)
返回("1")
""如果结束()
 // 得到的结果 变量名  赋值  到期时间
 // 
玩家对象 = 数组玩家[玩家索引]
 // 
属性玩家 = 玩家对象.属性
 // 
let palyerid = 属性玩家.id
let key = 列表数组[0]
let value = 列表数组[1] // 通用型的值，这里就不到整数了
let T = 取时间戳()
T = 到整数(T / 1000)

let lasttime = T + 到整数(列表数组[2])
 // 检测下这个key是否已经存在玩家变量中，不需要查库，因为首次上线时候会从库=读取齐全的
!!如果(玩家对象.变量值表[key] != 未定义)
返回(脚本_失败)
""如果结束()
 // 
let Sql = 数据配置.变量添加
Sql = 文本替换(Sql, '#id' ,palyerid )
Sql = 文本替换(Sql, '#key' ,key )
Sql = 文本替换(Sql, '#value' ,value )
Sql = 文本替换(Sql, '#lasttime' ,lasttime )
 // 记得执行数据库 这个表一定要注意设定，当前key不允许重复 上面已经判断了。不需要管了。sql一定是执行成功的。失败唯一原因就是mysql掉线了。数据库已经不会变更，无所谓成功失败。
数据库执行(Sql, 1)
 // 值得注意的是，这里如果添加了。那么玩家的变量键值表也需要增加。玩家上线时候同步增加
玩家对象.变量值表[key] = value
玩家对象.变量时表[key] = lasttime
 // 
服务端调试输出("-ADD--" + Sql)


返回(脚本_成功)

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本1011玩家删除动态变量设置玩家字段变量  1011 0 state   会删除当前玩家的动态变量 恢复为 0 或者 未定义 同步删除数据库中的记录。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000Param文本型
351100变量名类型备用备注8|8|4|41|2|3|4
350000列表数组数组型
350000玩家索引数值型
350000玩家对象玩家类
350000属性玩家玩家属性
玩家索引 = 玩家查找(ID)
!!如果(玩家索引 ==  - 1)
返回("1")
""如果结束()
let len = 文本取长度(Param)
!!如果(len == 0)
返回("1")
""如果结束()
 // 
玩家对象 = 数组玩家[玩家索引]
 // 
属性玩家 = 玩家对象.属性
 // 
let palyerid = 属性玩家.id
let key = Param
key = 文本替换(key  ,' '  ,'' )
 // 检测下这个key是否已经存在玩家变量中，不需要查库，因为首次上线时候会从库=读取齐全的 存在才可以删除，不存在肯定错误了
!!如果(玩家对象.变量值表[key] == 未定义)
返回("1")
""如果结束()
 // 
let Sql = 数据配置.变量删除

Sql = 文本替换(Sql, '#id' ,palyerid )
Sql = 文本替换(Sql, '#key' ,key )
 // 记得执行数据库 这个表一定要注意设定，当前key不允许重复 上面已经判断了。不需要管了。sql一定是执行成功的。失败唯一原因就是mysql掉线了。数据库已经不会变更，无所谓成功失败。
数据库执行(Sql, 1)
 // 删除
数据Json删键值(玩家对象.变量值表, key)
数据Json删键值(玩家对象.变量时表, key)
 // 

返回("0")

231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本1012玩家修改动态变量设置玩家字段变量  1012 0 state  == 2   可以通过该命令检测玩家动态变量是否等于某个值
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000Param文本型
351100变量名类型备用备注8|8|4|41|2|3|4
350000列表数组数组型
350000玩家索引数值型
350000玩家对象玩家类
350000属性玩家玩家属性
玩家索引 = 玩家查找(ID)

!!如果(玩家索引 ==  - 1)
返回("1")
""如果结束()
 // 取出当前判断设定
列表数组 = 文本分割(Param, ' ')

!!如果(列表数组 == 未定义 或 列表数组.#长度 == 0)
返回("1")
""如果结束()
 // 得到的结果 变量名  运算符  新的值
 // 
玩家对象 = 数组玩家[玩家索引]
 // 
属性玩家 = 玩家对象.属性
 // 双波浪线 ~~ 表示 到整数() 效率更快，属于js语法糖
let palyerid = 属性玩家.id
let key = 列表数组[0]
let 运算符 = 列表数组[1] // 用于当前运算状态的符号
let value =~~ 列表数组[2] // 通用型的值，这里就不到整数了
let T = 取时间戳()
T = 到整数(T / 1000)
let lasttime = T + 到整数(列表数组[2])
 // 检测下这个key是否已经存在玩家变量中，不需要查库，因为首次上线时候会从库=读取齐全的
!!如果(玩家对象.变量值表[key] == 未定义)
返回("1")
""如果结束()
let 当前结果 =~~ 玩家对象.变量值表[key]
let 是否修改 = 假
 // 运算匹配  >=  >   ==  <=  <   +=   -=   =
!!如果(运算符 == '>=')
 // 检测当前值是否大于等于
!!如果(当前结果 < value)
 // 没有大于或者等于，直接判定失败
返回("1")
""如果结束()
#*否则如果(运算符 == '>')
!!如果(当前结果 <= value)
 // 没有大于，直接判定失败
返回("1")
""如果结束()
#*否则如果(运算符 == '==')
!!如果(当前结果 != value)
 // 没有等于，直接判定失败
返回("1")
""如果结束()
#*否则如果(运算符 == '<=')
!!如果(当前结果 > value)
 // 没有等于，直接判定失败
返回("1")
""如果结束()
#*否则如果(运算符 == '<')
!!如果(当前结果 >= value)
 // 没有等于，直接判定失败
返回("1")
""如果结束()
#*否则如果(运算符 == '+=')
当前结果 = 当前结果 + value
是否修改 = 真
#*否则如果(运算符 == '-=')
当前结果 = 当前结果 - value
是否修改 = 真
#*否则如果(运算符 == '=')
当前结果 = value
是否修改 = 真
""如果结束()
 // 设定到变量中 如果改变的话。这里直接写了，避免在运算中多次书写。
!!如果(是否修改 == 真)
玩家对象.变量值表[key] = 当前结果
 // 正常情况这里是要更新客户端值的，记得处理 暂时不支持更新时间。
let Sql = 数据配置.变量修改
Sql = 文本替换(Sql, '#id' ,palyerid )
Sql = 文本替换(Sql, '#key' ,key )
Sql = 文本替换(Sql, '#value' ,当前结果 )
 // Sql     = 文本替换(Sql, '#lasttime' ,lasttime )
 // 记得执行数据库 这个表一定要注意设定，当前key不允许重复 上面已经判断了。不需要管了。sql一定是执行成功的。失败唯一原因就是mysql掉线了。数据库已经不会变更，无所谓成功失败。
数据库执行(Sql, 1)
 // 
""如果结束()

返回("0")


231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本1013玩家检测动态变量文本型1013 0 state  检测这个变量是否存在
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000Param文本型
351100变量名类型备用备注8|8|4|41|2|3|4
350000列表数组数组型
350000玩家索引数值型
350000玩家对象玩家类
350000属性玩家玩家属性
玩家索引 = 玩家查找(ID)

!!如果(玩家索引 ==  - 1)
返回("1")
""如果结束()
 // 取出当前判断设定
!!如果(Param == '')
返回("1")
""如果结束()
 // 得到的结果 变量名  运算符  新的值
玩家对象 = 数组玩家[玩家索引]
 // 
属性玩家 = 玩家对象.属性
 // 双波浪线 ~~ 表示 到整数() 效率更快，属于js语法糖
let palyerid = 属性玩家.id
let key = Param
 // 检测下这个key是否已经存在玩家变量中，不需要查库，因为首次上线时候会从库=读取齐全的
!!如果(玩家对象.变量值表[key] == 未定义)
返回("1")
""如果结束()

返回("0")



231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本101对话文本型101 102 1001 等信息渲染
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型
240000Param文本型
240000Obj数值型属于那个对象类型 ，例如 NPC，怪物，玩家，脚本_
240000index数值型
351100变量名类型备用备注8|8|4|41|2|3|4
350000玩家玩家类
350000玩家索引数值型
350000属性玩家玩家属性
350000地图地图类
350000npcnpc属性
玩家索引 = 玩家查找(ID)
 // 
玩家 = 数组玩家[玩家索引]
 // 
属性玩家 = 玩家.属性
 // 
地图 = 数组地图[玩家.地图成员]

 // 
!!如果(Obj == 脚本类型_NPC)
npc = NP取属性(index)
!!如果(npc != 0)
Param = 子文本替换( Param , '%npc_name' ,npc.名称)
Param = 子文本替换( Param , '%npc_x' ,npc.x)
Param = 子文本替换( Param , '%npc_y' ,npc.y)

""如果结束()
#*否则如果(Obj == 脚本类型_怪物)
 // 如果有的话 怪物如果也是可以执行脚本则可以这里操作


""如果结束()
 // 玩家替换属性
Param = 子文本替换( Param , '%user_name' ,属性玩家.名称)
 // 这里批量替换玩家变量
!!数据Json对象遍历(k, 玩家.变量值表)
 // 遍历Json 对象的每个key/value对,k 为key json对象[k]为值 
!!如果(玩家.变量值表[k] != 未定义)
 // 默认替换掉这些值
Param = 子文本替换(Param, '%' + k,玩家.变量值表[k])
""如果结束()
""数据Json对象遍历结束()
 // 

返回(Param)


231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本2000刷怪功能文本型在指定的地图中刷怪 空格分开，并不是逗号。
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型玩家ID，套接字
240000param文本型刷怪参数，格式为：地图ID,怪物ID,怪物数量,坐标x,坐标y,坐标范围x,坐标范围y,复活时间
351100变量名类型备用备注12|6|4|41|2|3|4
350000参数数组数组型
350000地图ID数值型
350000怪物ID数值型
350000怪物数量数值型
350000坐标x数值型
350000坐标y数值型
350000坐标范围x数值型
350000坐标范围y数值型
350000复活时间数值型
350000玩家玩家类
350000队伍成员数组数组型
350000Json对象型
 // 解析参数
参数数组 = 文本分割(param, ' ')
服务端调试输出("进入刷怪:" + param)

!!如果(参数数组.#长度 != 8)
服务端调试输出("刷怪参数错误，参数数量不正确")
返回(脚本_失败)
""如果结束()
地图ID = 到数值(参数数组[0])
怪物ID = 到数值(参数数组[1])
怪物数量 = 到数值(参数数组[2])
坐标x = 到数值(参数数组[3])
坐标y = 到数值(参数数组[4])
坐标范围x = 到数值(参数数组[5])
坐标范围y = 到数值(参数数组[6])
复活时间 = 到数值(参数数组[7])

// 检查地图是否存在
let 地图 = 地图表查找(地图ID)
!!如果(地图 == 0)
服务端调试输出("地图ID不存在")
返回(脚本_失败)
""如果结束()

// 检查怪物是否存在
let 怪物 = 怪物表查找(怪物ID)
!!如果(怪物 == 0)
服务端调试输出("怪物ID不存在")
返回(脚本_失败)
""如果结束()

 // 获取当前玩家
let 玩家索引 = 玩家查找(ID)
!!如果(玩家索引 ==  - 1)
服务端调试输出("玩家不存在")
返回(脚本_失败)
""如果结束()
 // 
玩家 = 数组玩家[玩家索引]
玩家.怪物数组 = []
 // 刷怪逻辑
!!计次循环首(怪物数量, i)
let 随机x = 取随机数(坐标x - 坐标范围x, 坐标x + 坐标范围x)
let 随机y = 取随机数(坐标y - 坐标范围y, 坐标y + 坐标范围y)

 // 创建怪物对象
let 怪物对象 = {}
怪物对象.id = 怪物ID
怪物对象.地图ID = 地图ID
怪物对象.x = 随机x
怪物对象.y = 随机y
怪物对象.复活时间 = 复活时间
怪物对象.名称 = 怪物.名称
怪物对象.攻速 = 怪物.攻速
怪物对象.外观 = 怪物.外观
怪物对象.生命值 = 怪物.血量
怪物对象.index = i
 // 将怪物添加到玩家身上
数组加入成员末尾(玩家.怪物数组, 怪物对象)

""计次循环首结束()






 // 判断是否为队长 完美，小细节错误没有提示优化到。命令后面不能加注释
!!如果(玩家.队伍状态 == 1)
 // 假设1表示队长
 // 获取队伍成员
let 队伍索引 = 玩家.队伍索引
let 队伍属性 = 数组队伍[队伍索引]
队伍成员数组 = 队伍属性.队伍数组

 // 通知队伍成员刷怪
!!数组循环(队伍成员数组, j)
let 成员 = 队伍成员数组[j]
let Json = {}
Json.hex = 6006
Json.type = 1

Json.刷怪信息 = 玩家.怪物数组

服务端数据发送(成员.套接字, Json)

""数组循环结束()

##否则

 // 通知当前玩家刷怪
let Json = {}
Json.hex = 6006
Json.type = 1
Json.刷怪信息 = 玩家.怪物数组
服务端数据发送(玩家.套接字, Json)

""如果结束()

服务端调试输出("刷怪成功，地图ID：" + 地图ID + "，怪物ID：" + 怪物ID + "，数量：" + 怪物数量)


返回(脚本_成功)


231000子程序名返回值类型异步公开备注1|2|3|4|5-6
230100脚本2001回合战斗触发
241100参数名类型备用可空初始值备注1|2|3|4|5|6
240000ID数值型玩家套接字
240000data数值型战斗类型（1：怪物，2：玩家）
240000param文本型战斗参数（怪物ID或敌方玩家套接字）
351100变量名类型备用备注10|8|4|41|2|3|4
350000玩家玩家类
350000队伍索引数值型
350000队伍属性队伍配置
350000友方信息组数组型
350000敌方信息组数组型
350000index数值型
 // 查找玩家
index = 玩家查找(ID)
!!如果(index ==  - 1)
返回(脚本_失败)
""如果结束()
玩家 = 数组玩家[index]
 // 查找队伍
队伍索引 = 队伍_查找(ID)
 // 初始化友方信息组
友方信息组 = []
 // 如果玩家有队伍，则添加队伍成员信息
!!如果(队伍索引 !=  - 1)
 // 获取当前队伍
队伍属性 = 数组队伍[队伍索引]
 // 遍历队伍
服务端调试输出("--队伍:" + 队伍属性)

!!数组循环(队伍属性.队伍数组, i)
let 队员属性 = 队伍属性.队伍数组[i]
let 队员信息 = {}
队员信息.名称 = 数组玩家[队员属性.成员索引].属性.名称
队员信息.成员位置 = 队员属性.成员索引
队员信息.类型 = 1 // 1 为友方
队员信息.生命 = 数组玩家[队员属性.成员索引].属性.生命大
队员信息.攻速 = 数组玩家[队员属性.成员索引].属性.攻速
 // 添加宠物信息
!!如果(数组玩家[队员属性.成员索引].宠物 != 未定义)
let 宠物信息 = {}
宠物信息.名称 = 数组玩家[队员属性.成员索引].宠物.名称
宠物信息.生命 = 数组玩家[队员属性.成员索引].宠物.生命
宠物信息.攻速 = 数组玩家[队员属性.成员索引].宠物.攻速
宠物信息.类型 = 3 // 3 为友方宠物
队员信息.宠物 = 宠物信息
""如果结束()
数组加入成员末尾(友方信息组, 队员信息)
""数组循环结束()
##否则
 // 如果玩家没有队伍，则只添加玩家自己
let 玩家信息 = {}
玩家信息.名称 = 玩家.属性.名称
玩家信息.成员位置 = index
玩家信息.类型 = 1 // 1 为友方
玩家信息.生命 = 玩家.属性.生命大
玩家信息.攻速 = 玩家.属性.攻速
 // 添加宠物信息
!!如果(玩家.宠物 != 未定义)
let 宠物信息 = {}
宠物信息.名称 = 玩家.宠物.名称
宠物信息.生命 = 玩家.宠物.生命
宠物信息.攻速 = 玩家.宠物.攻速
宠物信息.类型 = 3 // 3 为友方宠物
玩家信息.宠物 = 宠物信息
""如果结束()
数组加入成员末尾(友方信息组, 玩家信息)
""如果结束()
 // 初始化敌方信息组
敌方信息组 = []
 // 根据战斗类型判断敌方信息
!!如果(data == 1)
 // 敌方是怪物
let 怪物ID组 = 文本分割(param, ' ')

!!数组循环(怪物ID组, i)

let 怪物ID = 到数值(怪物ID组[i])

let 怪物信息 = 怪物表查找(怪物ID)
!!如果(怪物信息 != 0)
let 敌方怪物 = {}
敌方怪物.名称 = 怪物信息.名称
敌方怪物.生命 = 怪物信息.生命
敌方怪物.攻速 = 怪物信息.攻速
敌方怪物.类型 = 5 // 5 为怪物
数组加入成员末尾(敌方信息组, 敌方怪物)
""如果结束()

""数组循环结束()



#*否则如果(data == 2)
 // 敌方是玩家
let 敌方玩家ID = 到数值(param)
let 敌方玩家索引 = 玩家查找(敌方玩家ID)
!!如果(敌方玩家索引 !=  - 1)
let 敌方玩家 = 数组玩家[敌方玩家索引]
let 敌方玩家信息 = {}
敌方玩家信息.名称 = 敌方玩家.属性.名称
敌方玩家信息.成员位置 = 敌方玩家索引
敌方玩家信息.类型 = 2 // 2 为敌方
敌方玩家信息.生命 = 敌方玩家.属性.生命大
敌方玩家信息.攻速 = 敌方玩家.属性.攻速
 // 添加宠物信息
!!如果(敌方玩家.宠物 != 未定义)
let 敌方宠物信息 = {}
敌方宠物信息.名称 = 敌方玩家.宠物.名称
敌方宠物信息.生命 = 敌方玩家.宠物.生命
敌方宠物信息.攻速 = 敌方玩家.宠物.攻速
敌方宠物信息.类型 = 4 // 4 为敌方宠物
敌方玩家信息.宠物 = 敌方宠物信息
""如果结束()
数组加入成员末尾(敌方信息组, 敌方玩家信息)
 // 查找敌方玩家的队伍
let 敌方队伍索引 = 队伍_查找(敌方玩家ID)
let 敌方队伍属性 = 数组队伍[敌方队伍索引]
!!如果(敌方队伍索引 !=  - 1)
!!数组循环(敌方队伍属性.队伍数组, i)
let 敌方队员属性 = 敌方队伍属性.队伍数组[i]
let 敌方队员信息 = {}
敌方队员信息.名称 = 数组玩家[敌方队员属性.成员索引].属性.名称
敌方队员信息.成员位置 = 敌方队员属性.成员索引
敌方队员信息.类型 = 2 // 2 为敌方
敌方队员信息.生命 = 数组玩家[敌方队员属性.成员索引].属性.生命大
敌方队员信息.攻速 = 数组玩家[敌方队员属性.成员索引].属性.攻速
 // 添加宠物信息
!!如果(数组玩家[敌方队员属性.成员索引].宠物 != 未定义)
let 敌方宠物信息 = {}
敌方宠物信息.名称 = 数组玩家[敌方队员属性.成员索引].宠物.名称
敌方宠物信息.生命 = 数组玩家[敌方队员属性.成员索引].宠物.生命
敌方宠物信息.攻速 = 数组玩家[敌方队员属性.成员索引].宠物.攻速
敌方宠物信息.类型 = 4 // 4 为敌方宠物
敌方队员信息.宠物 = 敌方宠物信息
""如果结束()
数组加入成员末尾(敌方信息组, 敌方队员信息)
""数组循环结束()
""如果结束()
""如果结束()
""如果结束()
 // 构建推送消息
let 战斗信息 = {}
战斗信息.友方信息组 = 友方信息组
战斗信息.敌方信息组 = 敌方信息组

 // 发送战斗信息
let 推送消息 = {}
推送消息.hex = 4000
推送消息.type = 5 // 推送类型为5
推送消息.info = 战斗信息
服务端数据发送(ID, 推送消息)

返回(脚本_成功)


